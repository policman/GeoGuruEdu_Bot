import asyncio
import asyncpg
import os
from datetime import datetime
from dotenv import load_dotenv
from sqlalchemy import create_engine, MetaData, Table, Column, Integer, String

from bot.database.migrations.users import users
from bot.database.migrations.events import events
from bot.database.migrations.participants import event_participants


load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

if not DATABASE_URL:
    raise ValueError("‚ùå DATABASE_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.")

metadata = MetaData()
users.tometadata(metadata)
events.tometadata(metadata)
event_participants.tometadata(metadata)

# –î–æ–±–∞–≤–∏–º —Ç–∞–±–ª–∏—Ü—É –≤–µ—Ä—Å–∏–π –º–∏–≥—Ä–∞—Ü–∏–π
migrations_table = Table(
    "migrations",
    metadata,
    Column("id", Integer, primary_key=True),
    Column("name", String, unique=True, nullable=False),
    Column("applied_at", String, nullable=False)
)


migrations_table.tometadata(metadata)
engine = create_engine(DATABASE_URL)
from bot.database.migrations.invitations import invitations
invitations.tometadata(metadata)


MIGRATION_LOG_FILE = "migration.log"

# === –õ–æ–≥–≥–µ—Ä ===
def log(message: str):
    timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    with open(MIGRATION_LOG_FILE, "a") as f:
        f.write(f"[{timestamp}] {message}\n")
    print(message)

# === –†—É—á–Ω–æ–π fallback ===
async def create_users_table_fallback():
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute("""
        CREATE TABLE IF NOT EXISTS users (
            id SERIAL PRIMARY KEY,
            last_name TEXT NOT NULL,
            first_name TEXT NOT NULL,
            middle_name TEXT,
            username TEXT NOT NULL,
            telegram_id BIGINT NOT NULL UNIQUE,
            position TEXT NOT NULL,
            experience INTEGER NOT NULL,
            department TEXT
        );
    """)
    await conn.close()
    log("‚úÖ –¢–∞–±–ª–∏—Ü–∞ users —Å–æ–∑–¥–∞–Ω–∞ –≤—Ä—É—á–Ω—É—é (fallback).")

def add_unique_invitation_index(engine):
    with engine.connect() as conn:
        conn.execute(
            "CREATE UNIQUE INDEX IF NOT EXISTS uniq_event_invited ON invitations (event_id, invited_user_id);"
        )
        print("‚úÖ –ò–Ω–¥–µ–∫—Å –Ω–∞ invitations —Å–æ–∑–¥–∞–Ω.")


# === –û—Å–Ω–æ–≤–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è ===
def create_sqlalchemy_tables():
    metadata.create_all(engine)
    log("‚úÖ –í—Å–µ —Ç–∞–±–ª–∏—Ü—ã SQLAlchemy —Å–æ–∑–¥–∞–Ω—ã.")

# === –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ===
async def main():
    try:
        create_sqlalchemy_tables()
        add_unique_invitation_index(engine)
        # –õ–æ–≥–∏—Ä—É–µ–º —Ñ–∞–∫—Ç –º–∏–≥—Ä–∞—Ü–∏–∏
        conn = await asyncpg.connect(DATABASE_URL)
        await conn.execute("""
            INSERT INTO migrations (name, applied_at)
            VALUES ($1, $2)
            ON CONFLICT (name) DO NOTHING;
        """, "initial_migration", datetime.now().isoformat())
        await conn.close()
        log("üóÇ –ú–∏–≥—Ä–∞—Ü–∏—è 'initial_migration' –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –∂—É—Ä–Ω–∞–ª.")
    except Exception as e:
        #log(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
        #log("üõ† –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É users –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ asyncpg...")
        await create_users_table_fallback()
        create_sqlalchemy_tables()

if __name__ == "__main__":
    asyncio.run(main())