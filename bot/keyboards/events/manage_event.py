from datetime import date
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton

def manage_event_keyboard(event, user_id, source, page):
    buttons = [
        [
            InlineKeyboardButton(
                text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å",
                callback_data=f"edit_event:{event['id']}:{source}:{page}"
            )
        ]
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

def manage_event_reply_keyboard():
    buttons = [
        [KeyboardButton(text="üì® –†–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è"), KeyboardButton(text="üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏")],
        [KeyboardButton(text="üóë –£–¥–∞–ª–∏—Ç—å")],
        [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
    ]
    return ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True)

def invite_method_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [ KeyboardButton(text="üìë –ü–æ –æ—Ç–¥–µ–ª–∞–º/–ø—Ä–æ—Ñ–∏–ª—é"), KeyboardButton(text="üë• –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º") ],
            [ KeyboardButton(text="üåê –í—Å–µ–º"), KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—é") ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ ¬´–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å / –û—Ç–º–µ–Ω–∏—Ç—å¬ª –¥–ª—è –≤—Å–µ—Ö —Ç—Ä—ë—Ö —Å—Ü–µ–Ω–∞—Ä–∏–µ–≤
def invite_confirm_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [ KeyboardButton(text="‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞") ]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )


def to_organizer_keyboard() -> ReplyKeyboardMarkup:
    """
    –ü–æ–∫–∞–∑–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞:
    [‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é]
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def answers_back_keyboard() -> ReplyKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –ø—Ä–∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–µ —Å–ø–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤:
    [‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é]
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True,
    )

def answers_list_inline(answers: list, limit: int, offset: int, event_id: int, participant_id: int, organizer_id: int) -> InlineKeyboardMarkup:
    """
    –°—Ç—Ä–æ–∏–º Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ –∑–∞–ø–∏—Å–µ–π answers = list[asyncpg.Record],
    –∫–∞–∂–¥–∞—è –∏–º–µ–µ—Ç –ø–æ–ª—è id, message_text, answer_text, answered_at.
    –§–æ—Ä–º–∞—Ç –∫–Ω–æ–ø–∫–∏: –ø–µ—Ä–≤—ã–µ 3‚Äì4 —Å–ª–æ–≤–∞ –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è + –¥–∞—Ç–∞ –≤ —Å–∫–æ–±–∫–∞—Ö ¬´dd.MM¬ª 
    –∏–ª–∏ ¬´dd.MM.YYYY¬ª –µ—Å–ª–∏ –¥—Ä—É–≥–æ–π –≥–æ–¥.
    callback_data = f"view_answer:{msg_id}:{event_id}:{participant_id}:{organizer_id}:{offset}"
    """
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for rec in answers:
        # –∏–∑ rec['message_text'] –±–µ—Ä—ë–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞
        words = rec["message_text"].split()
        short = " ".join(words[:3]) + ("‚Ä¶" if len(words) > 3 else "")
        # —Ñ–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        dt = rec["answered_at"].date()
        if dt.year == date.today().year:
            date_label = f"{dt.day:02d}.{dt.month:02d}"
        else:
            date_label = f"{dt.day:02d}.{dt.month:02d}.{dt.year}"
        btn_text = f"{short} ({date_label})"
        cb = f"view_answer:{rec['id']}:{event_id}:{participant_id}:{organizer_id}:{offset}"
        kb.inline_keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=cb)])

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è ¬´‚¨ÖÔ∏è¬ª –∏ ¬´‚û°Ô∏è¬ª –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    nav = []
    total = limit + offset  # —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏, –≤—ã–∑—ã–≤–∞—é—â–µ–º—É –Ω–∞–¥–æ –∑–Ω–∞—Ç—å –æ–±—â–µ–µ —á–∏—Å–ª–æ, –Ω–æ –º–æ–∂–Ω–æ –¥–æ–∫–∏–Ω—É—Ç—å –æ—Ç–¥–µ–ª—å–Ω–æ
    # –ï—Å–ª–∏ offset > 0, –µ—Å—Ç—å –Ω–∞–∑–∞–¥
    if offset >= limit:
        prev_offset = offset - limit
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_answers:{event_id}:{participant_id}:{organizer_id}:{prev_offset}"))
    # –ï—Å–ª–∏ –¥–ª–∏–Ω–∞ answers == limit, –∑–Ω–∞—á–∏—Ç, –≤–æ–∑–º–æ–∂–Ω–æ, –µ—Å—Ç—å –µ—â—ë ¬´–≤–ø–µ—Ä—ë–¥¬ª
    if len(answers) == limit:
        next_offset = offset + limit
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_answers:{event_id}:{participant_id}:{organizer_id}:{next_offset}"))
    if nav:
        kb.inline_keyboard.append(nav)

    return kb

def author_participants_keyboard() -> ReplyKeyboardMarkup:
    """
    Reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞, –ø–æ—è–≤–ª—è—é—â–∞—è—Å—è –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è ¬´–£—á–∞—Å—Ç–Ω–∏–∫–∏¬ª –∞–≤—Ç–æ—Ä–æ–º:
    [–í–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]  ‚Äî –æ—Ç–∫—Ä—ã—Ç—å —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤, –Ω—É–∂–¥–∞—é—â–∏—Ö—Å—è –≤ –æ—Ç–≤–µ—Ç–µ
    [–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]  ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º/–ø—Ä–æ—Ñ–∏–ª—è–º
    [‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é]       ‚Äî –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏—è
    """
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")],
            [KeyboardButton(text="‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")]
        ],
        resize_keyboard=True,
        one_time_keyboard=True
    )
