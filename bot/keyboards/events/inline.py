# keyboards/events/inline.py

from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

EVENTS_PER_PAGE = 5

def events_list_keyboard(
    events: list[dict],
    page: int,
    source: str,
    current_user_id: int
) -> InlineKeyboardMarkup:
    """
    –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π.
    –î–æ–±–∞–≤–ª—è–µ—Ç –∫ –Ω–∞–∑–≤–∞–Ω–∏—é —Å–æ–±—ã—Ç–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –¥–∞—Ç—É.
    –ï—Å–ª–∏ event['author_id'] == current_user_id, –≤ —Ç–µ–∫—Å—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è "(–í–∞—à–µ) ".
    """
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ–æ—Ä–º–∞—Ç—Ç–µ—Ä –¥–∞—Ç —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ, —á—Ç–æ–±—ã –Ω–µ –∑–∞—Ü–µ–ø–ª—è—Ç—å handlers/events –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ –º–æ–¥—É–ª—è
    from bot.handlers.events.format_event_dates import format_event_dates

    start = page * EVENTS_PER_PAGE
    end = (page + 1) * EVENTS_PER_PAGE
    page_events = events[start:end]

    event_buttons = []
    for event in page_events:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–æ–º
        prefix = "(–í–∞—à–µ) " if event.get("author_id") == current_user_id else ""
        title = event.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")

        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É —á–µ—Ä–µ–∑ format_event_dates
        date_label = format_event_dates(event["start_date"], event["end_date"])
        text = f"{prefix}{title} ({date_label})"

        callback_data = f"event:{event['id']}:{source}:{page}"
        event_buttons.append([InlineKeyboardButton(text=text, callback_data=callback_data)])

    # –ù–∞–≤–∏–≥–∞—Ü–∏–æ–Ω–Ω—ã–µ –∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–∑–∞–¥¬ª/¬´–í–ø–µ—Ä—ë–¥¬ª
    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page:{source}:{page - 1}")
        )
    if end < len(events):
        nav_buttons.append(
            InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page:{source}:{page + 1}")
        )
    if nav_buttons:
        event_buttons.append(nav_buttons)

    return InlineKeyboardMarkup(inline_keyboard=event_buttons)


def back_to_list_keyboard(source: str, page: int) -> InlineKeyboardMarkup:
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π."""
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back:{source}:{page}")]
        ]
    )


def event_action_keyboard(event_id: int, source: str, page: int, is_author: bool) -> InlineKeyboardMarkup:
    """
    Inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º —Å–æ–±—ã—Ç–∏–µ–º.
    –ï—Å–ª–∏ is_author=True, –ø–æ–∫–∞–∑—ã–≤–∞—é—Ç—Å—è –∫–Ω–æ–ø–∫–∏ ¬´–ò–∑–º–µ–Ω–∏—Ç—å¬ª –∏ ¬´–£–¥–∞–ª–∏—Ç—å¬ª.
    """
    buttons = []
    if is_author:
        buttons.append([
            InlineKeyboardButton(
                text="‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å",
                callback_data=f"edit_event:{event_id}:{source}:{page}"
            ),
            InlineKeyboardButton(
                text="üóë –£–¥–∞–ª–∏—Ç—å",
                callback_data=f"delete_event:{event_id}:{source}:{page}"
            )
        ])
    buttons.append([
        InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"back:{source}:{page}")
    ])
    return InlineKeyboardMarkup(inline_keyboard=buttons)
