from aiogram import Router
from aiogram.filters import StateFilter
from aiogram.types import Message, CallbackQuery
from bot.states.learning_states import MaterialSearch
from aiogram.fsm.context import FSMContext
from bot.keyboards.menu import section_menu_keyboard
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from bot.handlers.learning.materials.favorites import show_favorites_paginated, save_favorite

from .search import start_material_search, handle_query
from .pagination import show_more_results

router = Router()

# –¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞
@router.message(lambda m: m.text == "üîç –ü–æ–∏—Å–∫ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤")
async def entry_point(message: Message, state):
    await start_material_search(message, state)

# @router.message(lambda m: m.text == "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫")
# async def exit_material_search(message: Message, state: FSMContext):
#     await state.clear()
#     await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=section_menu_keyboard)

# from aiogram.filters import StateFilter

@router.message(StateFilter(MaterialSearch.waiting_for_query), lambda m: m.text == "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫")
async def exit_material_search(message: Message, state: FSMContext):
    await state.clear()
    # –ó–¥–µ—Å—å –≤–∞—à–∞ –∫–Ω–æ–ø–∫–∞ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é, –Ω–∞–ø—Ä–∏–º–µ—Ä:
    from bot.keyboards.menu import section_menu_keyboard
    await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω.", reply_markup=section_menu_keyboard)


@router.message(StateFilter(MaterialSearch.waiting_for_query), lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_fav_during_search(message: Message, state: FSMContext):
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return

    await state.set_state(MaterialSearch.viewing_favorites)
    await state.update_data(fav_page=0)

    await message.answer(
        "üìö –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É")]],
            resize_keyboard=True
        )
    )

    # –ó–¥–µ—Å—å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –µ—Å—Ç—å from_user, –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å ID
    await show_favorites_paginated(message, message.from_user.id, 0, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
@router.message(StateFilter(MaterialSearch.waiting_for_query))
async def query_handler(message: Message, state):
    await handle_query(message, state)

@router.callback_query(lambda c: c.data and c.data.startswith("material_page:"))
async def show_more_callback(callback: CallbackQuery, state: FSMContext):
    await show_more_results(callback, state)


@router.message(lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_fav_materials(message: Message, state: FSMContext):
    await state.set_state(MaterialSearch.viewing_favorites)
    await state.update_data(fav_page=0)
    await message.answer(
        "üìö –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É")]],
            resize_keyboard=True
        )
    )
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return

    # –ü–µ—Ä–µ–¥–∞—ë–º state –∫–∞–∫ —á–µ—Ç–≤—ë—Ä—Ç—ã–π –∞—Ä–≥—É–º–µ–Ω—Ç
    await show_favorites_paginated(message, message.from_user.id, 0, state)


@router.message(StateFilter(MaterialSearch.viewing_favorites), lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É")
async def back_to_search_from_favorites(message: Message, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º state, —á—Ç–æ–±—ã –±–æ—Ç —Å–Ω–æ–≤–∞ –∂–¥–∞–ª query
    await state.clear()
    # –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞–Ω–æ–≤–æ –≤–≤–µ—Å—Ç–∏ –∑–∞–ø—Ä–æ—Å
    from bot.handlers.learning.materials.search import start_material_search
    await start_material_search(message, state)
