from aiogram import types, Router
from aiogram.fsm.context import FSMContext
from aiogram.types import (
    Message, CallbackQuery,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
import asyncpg

from bot.states.learning_states import MaterialSearch
from bot.config import DATABASE_URL
from deep_translator import GoogleTranslator

router = Router()
ITEMS_PER_PAGE = 3
translator = GoogleTranslator(source="auto", target="ru")


def back_to_search_keyboard() -> ReplyKeyboardMarkup:
    return ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ –ø–æ–∏—Å–∫—É")]],
        resize_keyboard=True
    )


@router.callback_query(lambda c: c.data and c.data.startswith("fav:"))
async def save_favorite(callback: CallbackQuery, state: FSMContext):
    if not callback.data:
        return
    index = int(callback.data.split(":")[1])
    data = await state.get_data()
    results = data.get("results", [])

    if index >= len(results):
        await callback.answer("–û—à–∏–±–∫–∞: –ø—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    user_id = callback.from_user.id
    item = results[index]
    title = item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    # –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å, —á—Ç–æ URL –µ–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä
    url = item.get("primary_location", {}).get("landing_page_url") or item.get("id", "")
    authors = ", ".join(
        auth.get("author", {}).get("display_name", "") for auth in item.get("authorships", [])
    )
    year = str(item.get("publication_year", ""))
    annotation = (
        " ".join(item.get("abstract_inverted_index", {}).keys())
        if item.get("abstract_inverted_index")
        else "–ù–µ—Ç –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏"
    )

    conn = await asyncpg.connect(DATABASE_URL)
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ URL –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º —É —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    existing = await conn.fetchval(
        "SELECT 1 FROM favorite_materials WHERE user_id = $1 AND url = $2",
        user_id, url
    )
    if existing:
        await conn.close()
        await callback.answer("‚ö†Ô∏è –£–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º")
        return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ ‚Äì –≤—Å—Ç–∞–≤–ª—è–µ–º
    await conn.execute(
        """
        INSERT INTO favorite_materials (user_id, title, url, authors, year, annotation)
        VALUES ($1, $2, $3, $4, $5, $6)
        """,
        user_id, title, url, authors, year, annotation
    )
    await conn.close()
    await callback.answer("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ")



async def show_favorites_paginated(message: Message, user_id: int, page: int, state: FSMContext):
    await state.update_data(fav_msg_ids=[])

    conn = await asyncpg.connect(DATABASE_URL)
    total: int = await conn.fetchval(
        "SELECT COUNT(*) FROM favorite_materials WHERE user_id = $1", user_id
    )
    max_page = (total - 1) // ITEMS_PER_PAGE if total > 0 else 0
    if page < 0:
        page = 0
    elif page > max_page:
        page = max_page

    rows = await conn.fetch(
        """
        SELECT id, title, url, authors, year, annotation
        FROM favorite_materials
        WHERE user_id = $1
        ORDER BY created_at DESC
        OFFSET $2 LIMIT $3
        """,
        user_id, page * ITEMS_PER_PAGE, ITEMS_PER_PAGE
    )
    await conn.close()

    if not rows:
        m = await message.answer("‚≠ê –£ –≤–∞—Å –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π.")
        await state.update_data(fav_msg_ids=[m.message_id])
        return

    fav_msg_ids = []
    header = f"–°—Ç—Ä–∞–Ω–∏—Ü–∞ {page + 1}/{max_page + 1}"
    m_header = await message.answer(header)
    fav_msg_ids.append(m_header.message_id)

    for row in rows:
        raw_title = row["title"] or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"
        ru_title = translator.translate(raw_title)
        if ru_title.strip().lower() != raw_title.strip().lower():
            display_title = f"{ru_title} (–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ)"
        else:
            display_title = raw_title
        print(display_title)
        text = (
            f"<b>{display_title}</b>\n"
            f"üë§ {row['authors']}\n"
            f"üìÖ {row['year']}\n\n"
            f"üîó <a href='{row['url']}'>–°—Å—ã–ª–∫–∞</a>"
        )
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚ùå –£–¥–∞–ª–∏—Ç—å", callback_data=f"del_fav:{row['id']}")]
            ]
        )
        m = await message.answer(text, parse_mode="HTML", reply_markup=keyboard)
        fav_msg_ids.append(m.message_id)

    nav_buttons = []
    if page > 0:
        nav_buttons.append(
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data=f"fav_page:{page - 1}")
        )
    if page < max_page:
        nav_buttons.append(
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data=f"fav_page:{page + 1}")
        )

    if nav_buttons:
        m_nav = await message.answer(
            "–ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∏–∑–±—Ä–∞–Ω–Ω–æ–º—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[nav_buttons])
        )
        fav_msg_ids.append(m_nav.message_id)

    await state.update_data(fav_msg_ids=fav_msg_ids, fav_page=page, fav_max_page=max_page)


@router.message(lambda m: m.text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ")
async def show_fav_materials(message: Message, state: FSMContext):
    await state.set_state(MaterialSearch.viewing_favorites)
    await state.update_data(fav_page=0)
    await message.answer(
        "üìö –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", reply_markup=back_to_search_keyboard()
    )
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return

    await show_favorites_paginated(message, message.from_user.id, 0, state)


@router.callback_query(lambda c: c.data and c.data.startswith("fav_page:"))
async def paginate_favorites(callback: CallbackQuery, state: FSMContext):
    if callback.data is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    if callback.message is None or not isinstance(callback.message, Message):
        await callback.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    msg: Message = callback.message

    data = await state.get_data()
    fav_msg_ids: list = data.get("fav_msg_ids", [])

    bot = msg.bot
    if bot is None:
        await callback.answer("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return
    
    chat_id = msg.chat.id
    for msg_id in fav_msg_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except:
            pass

    parts = callback.data.split(":")
    try:
        page = int(parts[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –Ω–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã.")
        return

    await state.update_data(fav_page=page)

    # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º from_user, –∞ –ø–æ—Ç–æ–º –±–µ—Ä—ë–º –µ–≥–æ .id
    if not callback.from_user:
        await callback.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return
    user_id = callback.from_user.id

    await show_favorites_paginated(msg, user_id, page, state)
    await callback.answer()



@router.callback_query(lambda c: c.data and c.data.startswith("del_fav:"))
async def confirm_delete_favorite(callback: CallbackQuery, state: FSMContext):
    if callback.data is None:
        await callback.answer("–û—à–∏–±–∫–∞: –ø—É—Å—Ç—ã–µ –¥–∞–Ω–Ω—ã–µ.")
        return
    if callback.message is None or not isinstance(callback.message, Message):
        await callback.answer("–û—à–∏–±–∫–∞: —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ.")
        return
    msg: Message = callback.message

    await msg.delete()

    parts = callback.data.split(":")
    try:
        fav_id = int(parts[1])
    except (IndexError, ValueError):
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID.")
        return

    await state.update_data(delete_fav_id=fav_id)

    await msg.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é?",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚úÖ –£–¥–∞–ª–∏—Ç—å"), KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")]],
            resize_keyboard=True,
        ),
    )
    await callback.answer()


@router.message(lambda m: m.text == "‚úÖ –£–¥–∞–ª–∏—Ç—å")
async def delete_favorite_item(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.bot –Ω–µ None
    if message.bot is None:
        await message.answer("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    data = await state.get_data()
    fav_id = data.get("delete_fav_id")
    if not fav_id:
        await message.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç ID –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.")
        return
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return
    user_id = message.from_user.id

    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "DELETE FROM favorite_materials WHERE id = $1 AND user_id = $2",
        fav_id, user_id
    )
    total: int = await conn.fetchval(
        "SELECT COUNT(*) FROM favorite_materials WHERE user_id = $1",
        user_id
    )
    await conn.close()

    max_page = (total - 1) // ITEMS_PER_PAGE if total > 0 else 0
    page = data.get("fav_page", 0)
    if page > max_page:
        page = max_page

    old_ids: list = data.get("fav_msg_ids", [])
    bot = message.bot  # —É–∂–µ –ø—Ä–æ–≤–µ—Ä–∏–ª–∏, —á—Ç–æ –Ω–µ None
    chat_id = message.chat.id
    for msg_id in old_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except:
            pass

    await message.answer("‚úÖ –ü—É–±–ª–∏–∫–∞—Ü–∏—è —É–¥–∞–ª–µ–Ω–∞.")
    await show_favorites_paginated(message, user_id, page, state)
    await message.answer("üìö –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", reply_markup=back_to_search_keyboard())



@router.message(lambda m: m.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å")
async def cancel_delete_favorite(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ message.bot –Ω–µ None
    if message.bot is None:
        await message.answer("–û—à–∏–±–∫–∞: –±–æ—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω.")
        return

    data = await state.get_data()
    page = data.get("fav_page", 0)
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω.")
        return

    old_ids: list = data.get("fav_msg_ids", [])
    bot = message.bot
    chat_id = message.chat.id
    for msg_id in old_ids:
        try:
            await bot.delete_message(chat_id=chat_id, message_id=msg_id)
        except:
            pass

    await message.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")
    await show_favorites_paginated(message, message.from_user.id, page, state)
    await message.answer("üìö –í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã:", reply_markup=back_to_search_keyboard())
