from aiogram import types
from aiogram.fsm.context import FSMContext
from bot.services.semantic_scholar import search_papers
from bot.services.openalex import search_openalex
from bot.keyboards.learning.materials.search import more_results_keyboard
from bot.states.learning_states import MaterialSearch

MAX_RESULTS = 30  # –º–∞–∫—Å–∏–º—É–º —Å–∫–æ–ª—å–∫–æ –º–æ–∂–Ω–æ –ø—Ä–æ–ª–∏—Å—Ç—ã–≤–∞—Ç—å

async def show_more_results(callback: types.CallbackQuery, state: FSMContext):
    if not callback.data or not isinstance(callback.message, types.Message):
        return
    parts = callback.data.split(":")
    if len(parts) != 3:
        return
    _, source, offset = parts
    try:
        offset = int(offset)
    except ValueError:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö.")
        return

    await callback.answer()
    await callback.message.edit_reply_markup()  # —É–¥–∞–ª–∏–º —Å—Ç–∞—Ä—É—é –∫–Ω–æ–ø–∫—É

    data = await state.get_data()
    query = data.get("query")

    if not query:
        await callback.message.answer("‚ö†Ô∏è –û—à–∏–±–∫–∞: –ø—Ä–µ–¥—ã–¥—É—â–∏–π –∑–∞–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    if offset >= MAX_RESULTS:
        await callback.message.answer("üìå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ø—Ä–µ–¥–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤.")
        return

    if source == "scholar":
        results = await search_papers(query, offset + 5)
        title = "–ï—â—ë:"
    else:
        results = await search_openalex(query, offset + 5)
        title = "–ï—â—ë:"

    if not results or offset >= len(results):
        await callback.message.answer("üì≠ –ë–æ–ª—å—à–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    await callback.message.answer(title)

    # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—É—â—É—é "—Å—Ç—Ä–∞–Ω–∏—Ü—É"
    for paper in results[offset:offset + 5]:
        if source == "scholar":
            text = (
                f"<b>{paper.get('title')}</b>\n"
                f"üîó <a href='{paper.get('url')}'>–°—Å—ã–ª–∫–∞</a>"
            )
        else:
            url = paper.get("primary_location", {}).get("landing_page_url") or paper.get("id", "")
            text = (
                f"<b>{paper.get('title')}</b>\n"
                f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞</a>"
            )
        await callback.message.answer(text, parse_mode="HTML", disable_web_page_preview=True)
