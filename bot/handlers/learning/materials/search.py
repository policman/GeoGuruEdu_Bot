import time
from aiogram import types
from aiogram.fsm.context import FSMContext

from bot.states.learning_states import MaterialSearch
from bot.services.openalex import search_openalex
from bot.services.semantic_scholar import search_papers

from bot.keyboards.learning.materials import exit_search_keyboard
from bot.keyboards.learning.learning import learning_menu_keyboard
from bot.keyboards.learning.materials.search import more_results_keyboard

DELAY_SECONDS = 5  # –∑–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞

async def search_materials(message: types.Message, state: FSMContext):
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –Ω–∞—É—á–Ω—ã—Ö –ø—É–±–ª–∏–∫–∞—Ü–∏–π:",
        reply_markup=exit_search_keyboard
    )
    await state.set_state(MaterialSearch.waiting_for_query)
    await state.update_data(last_query_time=0)

async def handle_query(message: types.Message, state: FSMContext):
    text = (message.text or "").strip()

    if text == "‚ùå –ó–∞–∫–æ–Ω—á–∏—Ç—å –ø–æ–∏—Å–∫":
        await state.clear()
        await message.answer("–ü–æ–∏—Å–∫ –∑–∞–≤–µ—Ä—à—ë–Ω", reply_markup=learning_menu_keyboard)
        return

    if len(text) < 3:
        await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞")
        return

    data = await state.get_data()
    now = time.time()
    if now - data.get("last_query_time", 0) < DELAY_SECONDS:
        await message.answer("‚è≥ –ü–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º.")
        return

    await state.update_data(last_query_time=now, query=text)
    await message.answer("üîé –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø–æ–∏—Å–∫...")

    # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ1: OpenAlex
    openalex_results = await search_openalex(text)
    if openalex_results:
        for item in openalex_results:
            title = item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            url = item.get("primary_location", {}).get("landing_page_url") or item.get("id", "")
            reply = (
                f"<b>{title}</b>\n"
                f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞</a>"
            )
            await message.answer(reply, parse_mode="HTML", disable_web_page_preview=True)

        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_results_keyboard("openalex", 5))
        return

    # –ü–æ–ø—ã—Ç–∫–∞ ‚Ññ2: Semantic Scholar
    scholar_results = await search_papers(text)
    if scholar_results:
        for paper in scholar_results:
            reply = (
                f"<b>{paper.get('title')}</b>\n"
                f"üîó <a href='{paper.get('url')}'>–°—Å—ã–ª–∫–∞</a>"
            )
            await message.answer(reply, parse_mode="HTML", disable_web_page_preview=True)

        await message.answer("–ü–æ–∫–∞–∑–∞—Ç—å –µ—â—ë?", reply_markup=more_results_keyboard("scholar", 5))
        return

    # –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ –æ–±–µ–∏—Ö –±–∞–∑–∞—Ö.")
