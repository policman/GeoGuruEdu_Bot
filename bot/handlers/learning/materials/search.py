# bot/handlers/learning/materials/search.py
from aiogram import types
from aiogram.fsm.context import FSMContext
from bot.states.learning_states import MaterialSearch
from bot.services.openalex import search_openalex
from bot.keyboards.learning.materials.search import (
    exit_and_favorites_keyboard, favorite_button, search_navigation_keyboard
)
from deep_translator import GoogleTranslator

translator = GoogleTranslator(source='auto', target='ru')


async def start_material_search(message: types.Message, state: FSMContext):
    await message.answer(
        "üîç –í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–π:",
        reply_markup=exit_and_favorites_keyboard()
    )
    await state.set_state(MaterialSearch.waiting_for_query)


async def handle_query(message: types.Message, state: FSMContext):
    query = message.text.strip() if message.text else ""
    if len(query) < 3:
        await message.answer("‚ö†Ô∏è –ú–∏–Ω–∏–º—É–º 3 —Å–∏–º–≤–æ–ª–∞.")
        return

    try:
        results = await search_openalex(query, per_page=3, page=1)
    except Exception as e:
        await message.answer(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ OpenAlex: {e}")
        return

    if not results:
        await message.answer("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.update_data(query=query, page=1, results=results, favorites=[])

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    for i, item in enumerate(results[:3]):
        raw_title = item.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        # –ü–æ–ª—É—á–∞–µ–º —Ä—É—Å—Å–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
        ru_title = translator.translate(raw_title)
        # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –æ–±–∞, –∏–≥–Ω–æ—Ä–∏—Ä—É—è —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã –ø–æ –∫—Ä–∞—è–º
        if ru_title.strip().lower() != raw_title.strip().lower():
            display_title = f"{ru_title} (–ü–µ—Ä–µ–≤–µ–¥–µ–Ω–æ)"
        else:
            display_title = raw_title

        authors = ', '.join(
            auth.get("author", {}).get("display_name", "")
            for auth in item.get("authorships", [])
        )
        year = item.get("publication_year", "")
        url = item.get("primary_location", {}).get("landing_page_url") or item.get("id", "")

        text = (
            f"<b>{i + 1}. {display_title}</b>\n"
            f"üë§ {authors}\n"
            f"üìÖ {year}\n\n"
            f"üîó <a href='{url}'>–°—Å—ã–ª–∫–∞</a>"
        )

        await message.answer(text, parse_mode="HTML", reply_markup=favorite_button(i))

    # –ù–∞–≤–∏–≥–∞—Ü–∏—è
    await message.answer("–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=search_navigation_keyboard("openalex", 3))
    await state.set_state(MaterialSearch.browsing_results)
