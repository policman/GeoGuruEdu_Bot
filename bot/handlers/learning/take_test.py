# bot/handlers/learning/take_test.py

from aiogram import Router, F
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.fsm.context import FSMContext
import asyncpg
import os
from datetime import datetime

from bot.services.test_service import TestService
from bot.states.test_states import TestTaking
from bot.database.user_repo import get_user_by_telegram_id
from bot.config import DATABASE_URL

router = Router()


@router.message(F.text == "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç")
async def show_tests_list(message: Message, state: FSMContext):
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –∫–∞–∫ Inline-–∫–Ω–æ–ø–∫–∏, –ø–æ–º–µ—á–∞—è —Å–≤–æ–∏ –∫–∞–∫ (–í–∞—à)."""
    conn = await asyncpg.connect(DATABASE_URL)
    svc = TestService(conn)

    tests = await svc.get_all_tests()

    # –ü–æ–ª—É—á–∞–µ–º ID —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    user = message.from_user
    if not user:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    user_row = await get_user_by_telegram_id(conn, user.id)

    await conn.close()

    if not user_row:
        await message.answer("‚ùå –í–∞—Å –Ω–µ—Ç –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–µ—Å—Ç–æ–≤.")
        return

    user_id = user_row["id"]

    if not tests:
        await message.answer("üì≠ –ü–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤.")
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for t in tests:
        title = t["title"]
        if t["created_by"] == user_id:
            title += " (–í–∞—à)"


        btn = InlineKeyboardButton(text=title, callback_data=f"start_test:{t['id']}")
        kb.inline_keyboard.append([btn])

    await message.answer("üìö –í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è:", reply_markup=kb)
    await state.clear()  # —Å–±—Ä–æ—Å–∏–º –ª—é–±—ã–µ FSM-—Å–æ—Å—Ç–æ—è–Ω–∏—è
    await state.set_state(TestTaking.waiting_for_start)



@router.callback_query(TestTaking.waiting_for_start, lambda c: c.data and c.data.startswith("start_test:"))
async def start_selected_test(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data is None:
        return
    parts = callback.data.split(":")
    test_id = int(parts[1])

    conn = await asyncpg.connect(DATABASE_URL)
    svc = TestService(conn)
    test_row = await svc.get_test_by_id(test_id)
    if not test_row:
        await conn.close()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ callback.message ‚Äî —ç—Ç–æ –∏–º–µ–Ω–Ω–æ Message, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å .answer()
        if isinstance(callback.message, Message):
            await callback.message.answer("‚ùå –¢–µ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã (—Å –ø–æ–∑–∏—Ü–∏—è–º–∏ –∏ –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏)
    questions = await svc.get_questions(test_id)
    questions_data = []
    for q in questions:
        opts = await svc.get_options(q["id"])
        questions_data.append({
            "question_id": q["id"],
            "text": q["text"],
            "options": [
                {"id": o["id"], "text": o["text"], "is_correct": o["is_correct"]}
                for o in opts
            ]
        })
    await conn.close()

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ state: —Ç–µ—Å—Ç –∏ questions
    await state.update_data(
        taking_test_id=test_id,
        questions=questions_data,
        current_index=0,
        correct_count=0
    )

    # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ callback.message ‚Äî —ç—Ç–æ –∏–º–µ–Ω–Ω–æ Message, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑–≤–∞—Ç—å ask_question
    msg = callback.message
    if not isinstance(msg, Message):
        return

    await ask_question(msg, state)
    await state.set_state(TestTaking.waiting_for_answer)



async def ask_question(chat_obj: Message, state: FSMContext):
    """
    –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è: –±–µ—Ä—ë—Ç –∏–∑ state questions[current_index],
    —Ä–∏—Å—É–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ.
    """
    from aiogram.types import Message as AiogramMessage
    if not isinstance(chat_obj, AiogramMessage):
        return

    data = await state.get_data()
    questions = data.get("questions", [])
    idx = data.get("current_index", 0)
    if idx is None or idx >= len(questions):
        return

    q = questions[idx]
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for opt in q["options"]:
        btn = InlineKeyboardButton(
            text=opt["text"],
            callback_data=f"answer:{q['question_id']}:{opt['id']}"
        )
        kb.inline_keyboard.append([btn])

    await chat_obj.answer(
        f"‚ùì <b>–í–æ–ø—Ä–æ—Å {idx+1}:</b> {q['text']}",
        parse_mode="HTML",
        reply_markup=kb
    )


@router.callback_query(TestTaking.waiting_for_answer, lambda c: c.data and c.data.startswith("answer:"))
async def process_answer(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    if callback.data is None:
        return

    parts = callback.data.split(":")
    question_id = int(parts[1])
    chosen_option_id = int(parts[2])

    data = await state.get_data()
    questions = data.get("questions", [])
    idx = data.get("current_index", 0)
    if idx is None or idx >= len(questions):
        return

    q = questions[idx]
    selected = next((o for o in q["options"] if o["id"] == chosen_option_id), None)
    is_correct = selected["is_correct"] if selected else False

    # –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ‚Äî –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
    next_idx = idx + 1
    total = len(questions)
    msg = callback.message
    if not isinstance(msg, Message):
        return

    if next_idx < total:
        # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
        try:
            await msg.edit_reply_markup(reply_markup=None)
        except:
            pass

        # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        await msg.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

        if is_correct:
            new_correct = data.get("correct_count", 0) + 1
            await state.update_data(correct_count=new_correct)

        await state.update_data(current_index=next_idx)
        await ask_question(msg, state)
        return

    # --- –ü–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å ---
    # –£–±–∏—Ä–∞–µ–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    try:
        await msg.edit_reply_markup(reply_markup=None)
    except:
        pass

    # –í–µ—Ä–¥–∏–∫—Ç
    await msg.answer("‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω–æ!" if is_correct else "‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ.")

    # –£—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç, –µ—Å–ª–∏ –±—ã–ª
    if is_correct:
        new_correct = data.get("correct_count", 0) + 1
        await state.update_data(correct_count=new_correct)

    # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ
    data = await state.get_data()
    correct = data.get("correct_count", 0)
    total_q = total

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", callback.from_user.id)
    if user_row:
        user_id = user_row["id"]
        svc = TestService(conn)
        await svc.save_test_result(user_id, data["taking_test_id"], correct, total_q)
    await conn.close()

    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
    percent = int((correct / total_q) * 100) if total_q else 0
    def get_progress_bar(pct: int) -> str:
        return f"{'üü©' * (pct // 10)}{'‚¨úÔ∏è' * (10 - (pct // 10))}"
    progress_bar = get_progress_bar(percent)

    # –û—Ç–∑—ã–≤
    if percent == 100:
        feedback = "üéâ –û—Ç–ª–∏—á–Ω–æ! –í—ã –æ—Ç–≤–µ—Ç–∏–ª–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –Ω–∞ –≤—Å–µ –≤–æ–ø—Ä–æ—Å—ã!"
    elif percent >= 80:
        feedback = "üí™ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!"
    elif percent >= 50:
        feedback = "üëç –ù–µ–ø–ª–æ—Ö–æ, –Ω–æ –º–æ–∂–Ω–æ –ª—É—á—à–µ."
    else:
        feedback = "üìò –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑, –≤—ã —Å–º–æ–∂–µ—Ç–µ –ª—É—á—à–µ!"

    await msg.answer(
        f"üèÅ <b>–¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à—ë–Ω!</b>\n"
        f"{progress_bar}  <b>{percent}%</b>\n"
        f"–†–µ–∑—É–ª—å—Ç–∞—Ç: <b>{correct} –∏–∑ {total_q}</b>\n\n"
        f"{feedback}",
        parse_mode="HTML"
    )

    await state.clear()


