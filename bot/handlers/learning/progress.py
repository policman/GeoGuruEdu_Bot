from aiogram import Router, F
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import asyncpg
from bot.config import DATABASE_URL
from bot.database.user_repo import get_user_by_telegram_id
from datetime import date

router = Router()

@router.message(F.text == "üìä –ü—Ä–æ–≥—Ä–µ—Å—Å")
async def show_test_progress(message: Message, state: FSMContext):
    await state.clear()

    user = message.from_user
    if not user:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await get_user_by_telegram_id(conn, user.id)
    if not user_row:
        await conn.close()
        await message.answer("‚ùå –í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    user_id = user_row["id"]

    # --- –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤ ---
    test_results = await conn.fetch("""
        SELECT t.title, tr.correct_answers, tr.total_questions, tr.taken_at
        FROM test_results tr
        JOIN (
            SELECT test_id, MAX(taken_at) AS latest
            FROM test_results
            WHERE user_id = $1
            GROUP BY test_id
        ) latest_attempts ON tr.test_id = latest_attempts.test_id AND tr.taken_at = latest_attempts.latest
        JOIN tests t ON tr.test_id = t.id
        WHERE tr.user_id = $1
        ORDER BY tr.taken_at DESC
    """, user_id)

    # --- –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π ---
    created_events = await conn.fetchval("""
        SELECT COUNT(*) FROM events WHERE author_id = $1
    """, user_id)

    # --- –ê–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (start_date > —Å–µ–≥–æ–¥–Ω—è) ---
    active_events = await conn.fetchval("""
        SELECT COUNT(*) FROM events e
        LEFT JOIN event_participants ep ON ep.event_id = e.id
        WHERE e.start_date > CURRENT_DATE AND (e.author_id = $1 OR ep.user_id = $1)
    """, user_id)

    # --- –ü–æ—Å–µ—â—ë–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è (start_date <= —Å–µ–≥–æ–¥–Ω—è) ---
    visited_events = await conn.fetchval("""
        SELECT COUNT(*) FROM events e
        LEFT JOIN event_participants ep ON ep.event_id = e.id
        WHERE e.start_date <= CURRENT_DATE AND (e.author_id = $1 OR ep.user_id = $1)
    """, user_id)

    # --- –ò–∑–±—Ä–∞–Ω–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã ---
    favorite_materials = await conn.fetchval("""
        SELECT COUNT(*) FROM favorite_materials WHERE user_id = $1
    """, user.id)


    await conn.close()

    # --- –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ ---
    lines = ["üìä <b>–í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:</b>\n"]

    if test_results:
        lines.append("üß™ <b>–¢–µ—Å—Ç—ã (–ø–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞):</b>")
        for r in test_results:
            date_str = r["taken_at"].strftime("%d.%m.%Y %H:%M")
            score = f"{r['correct_answers']} –∏–∑ {r['total_questions']}"
            lines.append(f"‚Äî <b>{r['title']}</b> ({date_str}): {score}")
    else:
        lines.append("üß™ –¢–µ—Å—Ç—ã: –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–π.")

    lines.append("\nüéØ <b>–°–æ–±—ã—Ç–∏—è:</b>")
    lines.append(f"‚Äî –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π: {active_events}")
    lines.append(f"‚Äî –ü–æ—Å–µ—â–µ–Ω–æ —Å–æ–±—ã—Ç–∏–π: {visited_events}")
    lines.append(f"‚Äî –°–æ–∑–¥–∞–Ω–æ —Å–æ–±—ã—Ç–∏–π: {created_events}")

    lines.append("\nüìö <b>–ú–∞—Ç–µ—Ä–∏–∞–ª—ã:</b>")
    lines.append(f"‚Äî –ò–∑–±—Ä–∞–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤: {favorite_materials}")

    await message.answer("\n".join(lines), parse_mode="HTML")
