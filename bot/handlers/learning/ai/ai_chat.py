from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import Command
from bot.keyboards.learning.ai.ai_chat import ai_chat_kb
from bot.states.ai_chat import AIChatStates
import aiohttp
import os
from typing import Optional
router = Router()

OPENROUTER_API_KEY = os.getenv("OPENROUTER_API_KEY")

@router.message(Command("ai_chat"))
async def enter_ai_chat(message: types.Message, state: FSMContext):
    await state.set_state(AIChatStates.chatting)
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ –ò–ò-—á–∞—Ç DeepSeek. –ó–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å üëá", reply_markup=ai_chat_kb)

@router.message(lambda msg: msg.text == "‚õîÔ∏è –ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥", AIChatStates.chatting)
async def exit_ai_chat(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –í–æ–∑–≤—Ä–∞—â–∞—é—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=types.ReplyKeyboardRemove())
    # –í—ã–∑–æ–≤–∏—Ç–µ –∑–¥–µ—Å—å show_main_menu(message), –µ—Å–ª–∏ –µ—Å—Ç—å —Ñ—É–Ω–∫—Ü–∏—è

@router.message(AIChatStates.chatting)
async def process_ai_input(message: types.Message, state: FSMContext):
    await state.set_state(AIChatStates.waiting_response)
    await message.answer("üß† –î—É–º–∞—é...")

    response = await query_deepseek(message.text or "")  # <-- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ

    if response:
        await message.answer(response)
    else:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò.")

    await state.set_state(AIChatStates.chatting)

async def query_deepseek(prompt: str) -> Optional[str]:
    if not OPENROUTER_API_KEY:
        return "API-–∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω."
    url = "https://openrouter.ai/api/v1/chat/completions"
    headers = {
        "Authorization": f"Bearer {OPENROUTER_API_KEY}",
        "Content-Type": "application/json",
        "HTTP-Referer": "https://t.me/your_bot_username"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π –±–æ—Ç
    }
    payload = {
        "model": "deepseek/deepseek-v3-base:free",
        "messages": [{"role": "user", "content": prompt}]
    }

    async with aiohttp.ClientSession() as session:
        async with session.post(url, headers=headers, json=payload) as resp:
            if resp.status == 200:
                data = await resp.json()
                return data["choices"][0]["message"]["content"]
            return None