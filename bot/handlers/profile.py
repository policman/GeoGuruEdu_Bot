from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
import asyncpg

from bot.database.user_repo import get_user_by_telegram_id, update_user_field
from bot.config import DATABASE_URL

router = Router()

class EditProfile(StatesGroup):
    editing_field = State()

def profile_edit_keyboard() -> InlineKeyboardMarkup:
    return InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–§–∞–º–∏–ª–∏—è", callback_data="edit_profile:last_name")],
        [InlineKeyboardButton(text="–ò–º—è", callback_data="edit_profile:first_name")],
        [InlineKeyboardButton(text="–û—Ç—á–µ—Å—Ç–≤–æ", callback_data="edit_profile:middle_name")],
        [InlineKeyboardButton(text="–î–æ–ª–∂–Ω–æ—Å—Ç—å", callback_data="edit_profile:position")],
        [InlineKeyboardButton(text="–°—Ç–∞–∂", callback_data="edit_profile:experience")],
        [InlineKeyboardButton(text="–û—Ç–¥–µ–ª", callback_data="edit_profile:department")]
    ])

# üßæ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def show_profile(message: Message, state: FSMContext):
    if not message.from_user:
        await message.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    conn = await asyncpg.connect(DATABASE_URL)
    user = await get_user_by_telegram_id(conn, message.from_user.id)
    await conn.close()

    if not user:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ.")
        return

    profile_text = (
        f"üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è</b>\n\n"
        f"–§–∞–º–∏–ª–∏—è: {user.get('last_name') or '-'}\n"
        f"–ò–º—è: {user.get('first_name') or '-'}\n"
        f"–û—Ç—á–µ—Å—Ç–≤–æ: {user.get('middle_name') or '-'}\n"
        f"Username: @{user.get('username') or '-'}\n"
        f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.get('position') or '-'}\n"
        f"–°—Ç–∞–∂: {user.get('experience', 0)} –ª–µ—Ç\n"
        f"–û—Ç–¥–µ–ª: {user.get('department') or '-'}"
    )

    await message.answer(profile_text, parse_mode="HTML", reply_markup=profile_edit_keyboard())

# üñä –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É
@router.callback_query(F.data.startswith("edit_profile:"))
async def handle_edit_profile(callback: CallbackQuery, state: FSMContext, bot: Bot):
    if not callback.from_user or not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞", show_alert=True)
        return

    parts = callback.data.split(":")
    if len(parts) < 2:
        await callback.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ", show_alert=True)
        return

    field = parts[1]

    prompts = {
        "last_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ñ–∞–º–∏–ª–∏—é:",
        "first_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –∏–º—è:",
        "middle_name": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ—Ç—á–µ—Å—Ç–≤–æ (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):",
        "position": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–æ–ª–∂–Ω–æ—Å—Ç—å:",
        "experience": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞–∂ –≤ –≥–æ–¥–∞—Ö (—Ç–æ–ª—å–∫–æ —á–∏—Å–ª–æ):",
        "department": "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π –æ—Ç–¥–µ–ª (–∏–ª–∏ –æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º):"
    }

    await state.set_state(EditProfile.editing_field)
    await state.update_data(field=field)

    await bot.send_message(callback.from_user.id, prompts[field])
    await callback.answer()

# üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
@router.message(EditProfile.editing_field)
async def save_profile_field(message: Message, state: FSMContext):
    if not message.from_user:
        await message.answer("–û—à–∏–±–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    data = await state.get_data()
    field = data.get("field")
    if not field:
        await message.answer("–û—à–∏–±–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        await state.clear()
        return

    value = (message.text or "").strip()

    if field == "experience":
        try:
            value = int(value)
        except ValueError:
            await message.answer("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è —Å—Ç–∞–∂–∞.")
            return

    conn = await asyncpg.connect(DATABASE_URL)
    await update_user_field(conn, message.from_user.id, field, value)
    user = await get_user_by_telegram_id(conn, message.from_user.id)
    await conn.close()
    await state.clear()

    if user:
        profile_text = (
            f"‚úÖ <b>–î–∞–Ω–Ω—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!</b>\n\n"
            f"–§–∞–º–∏–ª–∏—è: {user.get('last_name') or '-'}\n"
            f"–ò–º—è: {user.get('first_name') or '-'}\n"
            f"–û—Ç—á–µ—Å—Ç–≤–æ: {user.get('middle_name') or '-'}\n"
            f"Username: @{user.get('username') or '-'}\n"
            f"–î–æ–ª–∂–Ω–æ—Å—Ç—å: {user.get('position') or '-'}\n"
            f"–°—Ç–∞–∂: {user.get('experience', 0)} –ª–µ—Ç\n"
            f"–û—Ç–¥–µ–ª: {user.get('department') or '-'}"
        )
        await message.answer(profile_text, parse_mode="HTML", reply_markup=profile_edit_keyboard())
    else:
        await message.answer("‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
