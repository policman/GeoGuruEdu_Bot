# from aiogram import types
# from aiogram.dispatcher import Dispatcher, FSMContext
# from aiogram.dispatcher.filters import Text
# from datetime import datetime
# from bot.states.event_states import EventCreation
# from bot.keyboards.events import event_menu_keyboard, confirmation_keyboard
# from bot.services.event_repo import insert_event
# from bot.database.user_repo import get_user_by_telegram_id
# import asyncpg

from aiogram import types
from aiogram.dispatcher import Dispatcher, FSMContext
from aiogram.dispatcher.filters import Text
from datetime import datetime
import asyncpg
import os
from dotenv import load_dotenv

from bot.states.event_states import EventCreation
from bot.keyboards.events import event_menu_keyboard, confirmation_keyboard
from bot.services.event_repo import insert_event
from bot.database.user_repo import get_user_by_telegram_id
from bot.keyboards.common import confirm_photos_keyboard, confirm_skip_video_keyboard


load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")



# –°—Ç–∞—Ä—Ç —Ä–∞–∑–¥–µ–ª–∞ "–°–æ–±—ã—Ç–∏—è"
async def events_entry(message: types.Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=event_menu_keyboard)

# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–±—ã—Ç–∏—è
async def start_event_creation(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await EventCreation.waiting_for_title.set()

async def set_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:")
    await EventCreation.waiting_for_description.set()

async def set_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É (—Ñ–æ—Ä–º–∞—Ç: –¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ –¥–¥.–º–º.–≥–≥–≥–≥-–¥–¥.–º–º.–≥–≥–≥–≥ –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–∞—Ç —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é):")
    await EventCreation.waiting_for_dates.set()

async def set_dates(message: types.Message, state: FSMContext):
    text = message.text.strip()
    try:
        if '-' in text:
            start_str, end_str = text.split('-')
            start_date = datetime.strptime(start_str.strip(), "%d.%m.%Y").date()
            end_date = datetime.strptime(end_str.strip(), "%d.%m.%Y").date()
        elif ',' in text:
            dates = [datetime.strptime(d.strip(), "%d.%m.%Y").date() for d in text.split(',')]
            start_date = dates[0]
            end_date = dates[-1]
        else:
            start_date = end_date = datetime.strptime(text.strip(), "%d.%m.%Y").date()
        await state.update_data(start_date=start_date, end_date=end_date)
        await message.answer("–ö—Ç–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è? (–§–ò–û –∏–ª–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏):")
        await EventCreation.waiting_for_organizers.set()
    except Exception:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ:")

async def set_organizers(message: types.Message, state: FSMContext):
    await state.update_data(organizers=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—á–∞—Å—Ç–∏—è –≤ —Ä—É–±–ª—è—Ö –∏–ª–∏ '–±–µ—Å–ø–ª–∞—Ç–Ω–æ':")
    await EventCreation.waiting_for_price.set()

async def set_price(message: types.Message, state: FSMContext):
    text = message.text.lower().strip()
    price = 0 if text == "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" else int(text)
    await state.update_data(price=price)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ (1‚Äì5):")
    await EventCreation.waiting_for_photos.set()

from bot.keyboards.common import confirm_photos_keyboard

async def set_photos(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é")
        return

    data = await state.get_data()
    current_photos = data.get("photos", [])
    current_photos.append(message.photo[-1].file_id)
    await state.update_data(photos=current_photos)

    count = len(current_photos)
    if count >= 5:
        await message.answer("–§–æ—Ç–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ (0‚Äì2) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=confirm_skip_video_keyboard)
        await EventCreation.waiting_for_videos.set()
    else:
        await message.answer(f"–§–æ—Ç–æ –ø–æ–ª—É—á–µ–Ω–æ ({count}/5). –ú–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ':", reply_markup=confirm_photos_keyboard)

async def confirm_photos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    photos = data.get("photos", [])
    if not photos:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ —Ñ–æ—Ç–æ.")
        return

    await message.answer("–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≤–∏–¥–µ–æ (0‚Äì2) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å':", reply_markup=confirm_skip_video_keyboard)
    await EventCreation.waiting_for_videos.set()


async def set_videos(message: types.Message, state: FSMContext):
    data = await state.get_data()
    current_videos = data.get("videos", [])

    if message.text and message.text.lower() == '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å':
        await state.update_data(videos=[])
    elif message.video:
        current_videos.append(message.video.file_id)
        await state.update_data(videos=current_videos)

        if len(current_videos) < 2:
            await message.answer("–ú–æ–∂–µ—Ç–µ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –µ—â—ë –æ–¥–Ω–æ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '‚úÖ –ì–æ—Ç–æ–≤–æ':", reply_markup=confirm_photos_keyboard)
            return
    else:
        await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –≤–∏–¥–µ–æ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'")
        return

    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–±—ã—Ç–∏–µ –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏
    data = await state.get_data()
    price_display = '–±–µ—Å–ø–ª–∞—Ç–Ω–æ' if data['price'] == 0 else f"{data['price']}‚ÇΩ"

    media = []
    if data.get("photos"):
        media.append(types.InputMediaPhoto(media=data['photos'][0], caption=(
            f"üìå <b>{data['title']}</b>\n"
            f"üìù {data['description']}\n"
            f"üìÖ {data['start_date']} ‚Äî {data['end_date']}\n"
            f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {data['organizers']}\n"
            f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price_display}"
        ), parse_mode="HTML"))

        for photo_id in data['photos'][1:]:
            media.append(types.InputMediaPhoto(media=photo_id))

    if media:
        await message.answer_media_group(media)

    for video_id in data.get("videos", []):
        await message.answer_video(video_id)

    await message.answer("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ —Å–æ–∑–¥–∞–Ω–∏–µ:", reply_markup=confirmation_keyboard)
    await EventCreation.confirmation.set()


async def confirm_event(message: types.Message, state: FSMContext):
    if message.text != "‚úÖ –ì–æ—Ç–æ–≤–æ":
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É ‚úÖ –ì–æ—Ç–æ–≤–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.")
        return
    data = await state.get_data()

    conn = await asyncpg.connect(DATABASE_URL)

    user = await get_user_by_telegram_id(conn, message.from_user.id)
    if not user:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await conn.close()
        return

    event_data = {
        "author_id": user["id"],
        "title": data["title"],
        "description": data["description"],
        "start_date": data["start_date"],
        "end_date": data["end_date"],
        "organizers": data["organizers"],
        "price": data["price"],
        "photos": data["photos"],
        "videos": data["videos"],
        "is_draft": False,
    }

    await insert_event(conn, event_data)
    await conn.close()

    await message.answer("‚úÖ –°–æ–±—ã—Ç–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!", reply_markup=event_menu_keyboard)
    await state.finish()


async def cancel_creation(message: types.Message, state: FSMContext):
    await state.finish()
    await message.answer("–°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=event_menu_keyboard)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ö–µ–Ω–¥–ª–µ—Ä–æ–≤

def register_event_handlers(dp: Dispatcher):
    dp.register_message_handler(events_entry, lambda m: m.text == "üìÖ –°–æ–±—ã—Ç–∏—è")
    dp.register_message_handler(start_event_creation, lambda m: m.text == "üìù –°–æ–∑–¥–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ", state="*")
    dp.register_message_handler(set_title, state=EventCreation.waiting_for_title)
    dp.register_message_handler(set_description, state=EventCreation.waiting_for_description)
    dp.register_message_handler(set_dates, state=EventCreation.waiting_for_dates)
    dp.register_message_handler(set_organizers, state=EventCreation.waiting_for_organizers)
    dp.register_message_handler(set_price, state=EventCreation.waiting_for_price)
    dp.register_message_handler(set_photos, content_types=types.ContentType.PHOTO, state=EventCreation.waiting_for_photos)
    dp.register_message_handler(set_photos, content_types=types.ContentType.PHOTO, state=EventCreation.waiting_for_photos)
    dp.register_message_handler(confirm_photos, lambda m: m.text == "‚úÖ –ì–æ—Ç–æ–≤–æ", state=EventCreation.waiting_for_photos)
    dp.register_message_handler(set_videos, content_types=[types.ContentType.VIDEO, types.ContentType.TEXT],                          
    state=EventCreation.waiting_for_videos)
    dp.register_message_handler(confirm_event, lambda m: m.text == "‚úÖ –ì–æ—Ç–æ–≤–æ", state=EventCreation.confirmation)
    dp.register_message_handler(cancel_creation, lambda m: m.text == "üóë –û—Ç–º–µ–Ω–∏—Ç—å", state=EventCreation.confirmation)

