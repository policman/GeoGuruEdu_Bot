from aiogram import Router
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from typing import Union, Optional
from .format_event_dates import format_event_dates
import asyncpg
import os
from dotenv import load_dotenv

from bot.keyboards.events.my_events import my_events_keyboard
from bot.states.event_states import EventView
from bot.services.event_service import EventService
from bot.database.user_repo import get_user_by_telegram_id
from bot.keyboards.events import events_list_keyboard
from bot.keyboards.events.manage_event import (
    manage_event_keyboard,
    manage_event_reply_keyboard,
)
from aiogram.types import InputMediaPhoto
from datetime import date
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

router = Router()


async def show_event_list(
    message_or_callback: Union[Message, CallbackQuery],
    state: FSMContext,
    source: str,
    page: int = 0
):
    message: Optional[Message] = None
    user_id: Optional[int] = None

    if isinstance(message_or_callback, CallbackQuery):
        msg = message_or_callback.message
        if msg is not None and isinstance(msg, Message):
            message = msg
            user = message_or_callback.from_user
            user_id = user.id if user else None
    elif isinstance(message_or_callback, Message):
        message = message_or_callback
        user = message.from_user
        user_id = user.id if user else None

    if message is None or user_id is None:
        return

    conn = await asyncpg.connect(DATABASE_URL)
    event_service = EventService(conn)
    db_user = await get_user_by_telegram_id(conn, user_id)

    if not db_user:
        await conn.close()
        await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return

    if source == "active":
        events = await event_service.get_active_events(db_user["id"])
        title = "–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:"
    elif source == "created":
        events = await event_service.get_created_events(db_user["id"])
        title = "–°–æ–∑–¥–∞–Ω–Ω—ã–µ –≤–∞–º–∏ —Å–æ–±—ã—Ç–∏—è:"
    elif source == "archive":
        events = await event_service.get_archive_events(db_user["id"])
        title = "–ê—Ä—Ö–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:"
    else:
        events = []
        title = "–°–æ–±—ã—Ç–∏—è"

    await conn.close()

    if not events:
        await message.answer("–°–æ–±—ã—Ç–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", reply_markup=my_events_keyboard)
        return

    await state.set_state(EventView.viewing_events)

    if isinstance(message_or_callback, CallbackQuery):
        try:
            await message.delete()
        except Exception:
            pass

    await message.answer(
        title,
        reply_markup=events_list_keyboard(events, page, source, db_user["id"])
    )


@router.message(StateFilter(EventView.choosing_category), lambda m: m.text == "üìå –ê–∫—Ç–∏–≤–Ω—ã–µ")
async def handle_active_events(message: Message, state: FSMContext):
    await show_event_list(message, state, source="active", page=0)


@router.message(StateFilter(EventView.choosing_category), lambda m: m.text == "üõ† –°–æ–∑–¥–∞–Ω–Ω—ã–µ")
async def handle_created_events(message: Message, state: FSMContext):
    await show_event_list(message, state, source="created", page=0)


@router.message(StateFilter(EventView.choosing_category), lambda m: m.text == "üì¶ –ê—Ä—Ö–∏–≤–Ω—ã–µ")
async def handle_archive_events(message: Message, state: FSMContext):
    await show_event_list(message, state, source="archive", page=0)


@router.callback_query(StateFilter(EventView.viewing_events), lambda c: c.data and c.data.startswith("event:"))
async def handle_show_event(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    msg = callback.message
    if not callback.data or msg is None or not isinstance(msg, Message):
        return

    _, event_id_str, source, page_str = callback.data.split(":")
    event_id = int(event_id_str)
    page = int(page_str)

    conn = await asyncpg.connect(DATABASE_URL)
    event_service = EventService(conn)
    event = await event_service.get_event_by_id(event_id)
    db_user = await get_user_by_telegram_id(conn, callback.from_user.id)

    # ------------------------------------------
    # 1) –°—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º ¬´–ê—Ä—Ö–∏–≤–Ω—ã–µ¬ª: —Ç–æ–ª—å–∫–æ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç –∏ –∫–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª
    if source == "archive":
        # –ï—Å–ª–∏ —Å–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, —Å—Ä–∞–∑—É –∑–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∏ –≤—ã—Ö–æ–¥–∏–º
        if not event:
            await conn.close()
            await msg.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ë–î –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π –ª—é–±—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        await conn.close()

        # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ bot –∏ msg.chat –Ω–µ None
        bot = callback.bot
        assert bot is not None
        assert msg.chat is not None

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ + –∑–∞–≥–æ–ª–æ–≤–æ–∫/–æ–ø–∏—Å–∞–Ω–∏–µ
        full_caption = f"<b>{event['title']}</b>\n\n<i>{event['description']}</i>"
        if event.get("photo"):
            await bot.send_photo(
                chat_id=msg.chat.id,
                photo=event["photo"],
                caption=full_caption,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                chat_id=msg.chat.id,
                text=full_caption,
                parse_mode="HTML"
            )

        # –ó–∞—Ç–µ–º –¥–µ—Ç–∞–ª–∏: –¥–∞—Ç–∞, —Ü–µ–Ω–∞, –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä
        price = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if event["price"] == 0 else f"{event['price']}‚ÇΩ"
        details_text = (
            f"üìÖ –î–∞—Ç–∞: {format_event_dates(event['start_date'], event['end_date'])}\n"
            f"üí∞ –¶–µ–Ω–∞: {price}\n"
            f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event['organizers']}"
        )

        # Reply-–∫–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥¬ª
        kb_back_only = ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
            resize_keyboard=True,
            one_time_keyboard=True
        )
        await bot.send_message(
            chat_id=msg.chat.id,
            text=details_text,
            reply_markup=kb_back_only
        )

        # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –∏ –≤—ã—Ö–æ–¥–∏–º
        await state.set_state(EventView.viewing_events)
        await state.update_data(event_id=event_id, source=source, page=page)
        return
    # ------------------------------------------

    # –ï—Å–ª–∏ –Ω–µ –∞—Ä—Ö–∏–≤, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â—É—é –ª–æ–≥–∏–∫—É:
    if not event:
        await conn.close()
        await msg.answer("–°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return
    assert event is not None

    if not db_user:
        await conn.close()
        await msg.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    assert db_user is not None

    await state.update_data(event_id=event_id, source=source, page=page)

    try:
        await msg.delete()
    except Exception:
        pass

    bot = callback.bot
    assert bot is not None

    # === 1. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è ===
    user_id = db_user["id"]
    author_id = event["author_id"]
    if user_id == author_id:
        # –û–±—â–∏–µ –¥–µ—Ç–∞–ª–∏ (—Ç–µ–∫—Å—Ç –±–µ–∑ –∫–∞—Ä—Ç–æ—á–∫–∏)
        price = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if event["price"] == 0 else f"{event['price']}‚ÇΩ"
        full_caption = f"<b>{event['title']}</b>\n\n<i>{event['description']}</i>"
        photo = event.get("photo")
        if photo:
            await bot.send_photo(
                chat_id=msg.chat.id,
                photo=photo,
                caption=full_caption,
                parse_mode="HTML"
            )
        else:
            await bot.send_message(
                chat_id=msg.chat.id,
                text=full_caption,
                parse_mode="HTML"
            )

        details_text = (
            f"üìÖ –î–∞—Ç–∞: {format_event_dates(event['start_date'], event['end_date'])}\n\n"
            f"üí∞ –¶–µ–Ω–∞: {price}\n\n"
            f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event['organizers']}"
        )
        # Reply-–∫–Ω–æ–ø–∫–∏ ¬´–†–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è / –£—á–∞—Å—Ç–Ω–∏–∫–∏ / –£–¥–∞–ª–∏—Ç—å / –ù–∞–∑–∞–¥¬ª
        await bot.send_message(
            chat_id=msg.chat.id,
            text=details_text,
            reply_markup=manage_event_reply_keyboard()
        )
        # Inline-–∫–Ω–æ–ø–∫–∞ ¬´–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å¬ª
        await bot.send_message(
            chat_id=msg.chat.id,
            text="–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–±—ã—Ç–∏–µ:",
            reply_markup=manage_event_keyboard(event, user_id, source, page)
        )

    # === 2. –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî —É—á–∞—Å—Ç–Ω–∏–∫ (–Ω–æ –Ω–µ –∞–≤—Ç–æ—Ä) ===
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –ª–∏ –æ–Ω —É—á–∞—Å—Ç–Ω–∏–∫
        conn = await asyncpg.connect(DATABASE_URL)
        is_participant_row = await conn.fetchrow(
            """
            SELECT 1
            FROM event_participants
            WHERE event_id = $1 AND user_id = $2
            """,
            event_id, user_id
        )
        participant_counts = await event_service.get_participant_counts()
        participant_counts = await event_service.get_participant_counts()
        await conn.close()

        is_participant = bool(is_participant_row)
        if is_participant:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–∞—Ä—Ç–æ—á–∫—É –≤ —Å—Ç–∏–ª–µ —Å–ø–∏—Å–∫–∞ —Å–æ–±—ã—Ç–∏–π
            price = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if event["price"] == 0 else f"{event['price']}‚ÇΩ"
            caption = (
                f"<b>{event['title']}</b>\n"
                f"<i>{event['description']}</i>\n\n"
                f"üìÖ {format_event_dates(event['start_date'], event['end_date'])}\n"
                f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event['organizers']}\n"
                f"üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {price}"
            )
            count = participant_counts.get(event_id, 0)
            caption += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {count}"
            caption += "\n\n‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ"

            # Reply-–∫–Ω–æ–ø–∫–∏ ¬´–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É / –û—Ç–≤–µ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ / –ù–∞–∑–∞–¥¬ª
            kb_participant = ReplyKeyboardMarkup(
                keyboard=[
                    [KeyboardButton(text="–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É")],
                    [KeyboardButton(text="–û—Ç–≤–µ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞")],
                    [KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )

            photo = event.get("photo")
            if photo:
                await bot.send_photo(
                    chat_id=msg.chat.id,
                    photo=photo,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=kb_participant
                )
            else:
                await bot.send_message(
                    chat_id=msg.chat.id,
                    text=caption,
                    parse_mode="HTML",
                    reply_markup=kb_participant
                )
        else:
            # === 3. –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ (–Ω–µ –∞–≤—Ç–æ—Ä –∏ –Ω–µ —É—á–∞—Å—Ç–Ω–∏–∫) ===
            price = "–±–µ—Å–ø–ª–∞—Ç–Ω–æ" if event["price"] == 0 else f"{event['price']}‚ÇΩ"
            full_caption = f"<b>{event['title']}</b>\n\n<i>{event['description']}</i>"
            photo = event.get("photo")
            if photo:
                await bot.send_photo(
                    chat_id=msg.chat.id,
                    photo=photo,
                    caption=full_caption,
                    parse_mode="HTML"
                )
            else:
                await bot.send_message(
                    chat_id=msg.chat.id,
                    text=full_caption,
                    parse_mode="HTML"
                )

            details_text = (
                f"üìÖ –î–∞—Ç–∞: {format_event_dates(event['start_date'], event['end_date'])}\n"
                f"üí∞ –¶–µ–Ω–∞: {price}\n"
                f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {event['organizers']}"
            )
            kb_back_only = ReplyKeyboardMarkup(
                keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥")]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
            await bot.send_message(
                chat_id=msg.chat.id,
                text=details_text,
                reply_markup=kb_back_only
            )

    # –û—Å—Ç–∞—ë–º—Å—è –≤ —Ç–æ–º –∂–µ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
    await state.set_state(EventView.viewing_events)
    await state.update_data(event_id=event_id, source=source, page=page)




@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back(message: Message, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π (–∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)."""
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞—é –∫ —Å–ø–∏—Å–∫—É —Å–æ–±—ã—Ç–∏–π...", reply_markup=ReplyKeyboardRemove())
    await show_event_list(message, state, source="active", page=0)


@router.message(StateFilter(EventView.viewing_events), lambda m: m.text == "üóë –£–¥–∞–ª–∏—Ç—å")
async def handle_delete_event_reply(message: Message, state: FSMContext):
    print("–£–¥–∞–ª–∏—Ç—å –Ω–∞–∂–∞—Ç–æ!")
    print("STATE:", await state.get_state())

    data = await state.get_data()
    event_id = data.get("event_id")
    if not event_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    await state.update_data(pending_delete_id=event_id)
    await message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ —Å–æ–±—ã—Ç–∏–µ?\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –±—É–¥–µ—Ç –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ!",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="‚úÖ –î–∞"), KeyboardButton(text="‚ùå –ù–µ—Ç")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )

@router.message(lambda m: m.text == "‚úÖ –î–∞")
async def confirm_delete_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("pending_delete_id")
    if not event_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è.")
        return
    # –£–¥–∞–ª—è–µ–º –∏–∑ –ë–î
    conn = await asyncpg.connect(DATABASE_URL)
    event_service = EventService(conn)
    await event_service.delete_event_by_id(int(event_id))
    await conn.close()
    await message.answer("–°–æ–±—ã—Ç–∏–µ —É–¥–∞–ª–µ–Ω–æ!\n–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–≥–æ —É–∂–µ –Ω–µ–ª—å–∑—è.", reply_markup=ReplyKeyboardRemove())
    await state.clear()
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é "–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è"
    await state.set_state(EventView.choosing_category)
    from bot.handlers.events.navigation import show_my_events_menu
    await show_my_events_menu(message, state)

from bot.handlers.events.view import handle_show_event

@router.message(lambda m: m.text == "‚ùå –ù–µ—Ç")
async def cancel_delete_reply(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    await message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    # –°–æ–∑–¥–∞—ë–º —Ñ–µ–π–∫–æ–≤—ã–π callback, —á—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å handle_show_event –ø–æ–≤—Ç–æ—Ä–Ω–æ
    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
        async def answer(self, *args, **kwargs): return None

    fake_callback = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )
    await handle_show_event(fake_callback, state)

@router.callback_query(StateFilter(EventView.viewing_events), lambda c: c.data and c.data.startswith("page:"))
async def handle_pagination(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    msg = callback.message
    if not callback.data or msg is None:
        return

    try:
        _, source, page = callback.data.split(":")
        page = int(page)
    except ValueError:
        await msg.answer("–û—à–∏–±–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.")  # type: ignore
        return

    await show_event_list(callback, state, source=source, page=page)