from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
from bot.keyboards.events.view_event import visit_event_keyboard
from bot.keyboards.events.my_events import my_events_keyboard
import asyncpg
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from bot.config import DATABASE_URL
from typing import cast
from aiogram.types import Message
from bot.states.event_states import VisitEvent
from aiogram.filters import StateFilter


router = Router()


# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é "–ü–æ—Å–µ—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ"
@router.message(lambda m: m.text == "–ü–æ—Å–µ—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ")
async def handle_visit_event_menu(message: Message, state: FSMContext):
    await message.answer(
        "–†–∞–∑–¥–µ–ª –ø–æ—Å–µ—â–µ–Ω–∏—è —Å–æ–±—ã—Ç–∏–π:",
        reply_markup=visit_event_keyboard
    )

# –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.message(lambda m: m.text == "–°–ø–∏—Å–æ–∫ —Å–æ–±—ã—Ç–∏–π")
async def handle_list_all_events(message: Message, state: FSMContext):
    if not message.from_user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    telegram_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", telegram_id)
    if not user_row:
        await conn.close()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user_id = user_row["id"]

    events = await conn.fetch(
        """
        SELECT id, title, start_date, end_date, organizers
        FROM events
        WHERE author_id != $1
          AND is_draft = FALSE
          AND end_date >= CURRENT_DATE
        ORDER BY start_date
        """,
        user_id
    )
    await conn.close()

    if not events:
        await message.answer("–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π.")
        return

    for ev in events:
        text = (
            f"<b>{ev['title']}</b>\n"
            f"üìÖ {ev['start_date']} ‚Äì {ev['end_date']}\n"
            f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {ev['organizers']}"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                        callback_data=f"apply_event:{ev['id']}"
                    )
                ]
            ]
        )
        await message.answer(text, reply_markup=kb, parse_mode="HTML")




@router.message(lambda m: m.text == "–ü–æ–∏—Å–∫")
async def handle_search_events(message: Message, state: FSMContext):
    await state.set_state(VisitEvent.search_query)
    await message.answer("üîé –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ —Å–æ–±—ã—Ç–∏—è–º (–≤ –Ω–∞–∑–≤–∞–Ω–∏–∏ –∏–ª–∏ –æ–ø–∏—Å–∞–Ω–∏–∏):")


# --- –•–µ–Ω–¥–ª–µ—Ä: –°–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π ---
@router.message(lambda m: m.text == "–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
async def handle_invitations(message: Message, state):
    if not message.from_user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    telegram_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", telegram_id)
    if not user_row:
        await conn.close()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    user_id = user_row["id"]

    invitations = await conn.fetch(
        """
        SELECT inv.id as invitation_id, ev.id as event_id, ev.title, ev.start_date, ev.organizers
        FROM invitations inv
        JOIN events ev ON ev.id = inv.event_id
        WHERE inv.invited_user_id = $1 AND inv.is_accepted IS NULL
        """,
        user_id
    )
    await conn.close()

    if not invitations:
        await message.answer("–£ –≤–∞—Å –Ω–µ—Ç –Ω–æ–≤—ã—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")
        return

    for inv in invitations:
        text = (
            f"–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ:\n"
            f"<b>{inv['title']}</b>\n"
            f"–î–∞—Ç–∞: {inv['start_date']}\n"
            f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {inv['organizers']}"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                        callback_data=f"accept_invite:{inv['invitation_id']}:{inv['event_id']}"
                    ),
                    InlineKeyboardButton(
                        text="‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                        callback_data=f"decline_invite:{inv['invitation_id']}"
                    )
                ]
            ]
        )
        await message.answer(text, reply_markup=kb, parse_mode="HTML")

# –ù–∞–∑–∞–¥ (–∫ ‚Äú–ú–æ–∏ —Å–æ–±—ã—Ç–∏—è‚Äù)
@router.message(lambda m: m.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥")
async def handle_back_from_visit_event(message: Message, state: FSMContext):
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ —Å–ø–∏—Å–∫—É —Å–≤–æ–∏—Ö —Å–æ–±—ã—Ç–∏–π.",
        reply_markup=my_events_keyboard
    )


# --- –•–µ–Ω–¥–ª–µ—Ä: –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ---
@router.callback_query(lambda c: c.data and c.data.startswith("accept_invite:"))
async def handle_accept_invite(callback: CallbackQuery):
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    parts = callback.data.split(":")
    if len(parts) < 3:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    invitation_id = int(parts[1])
    event_id = int(parts[2])
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "UPDATE invitations SET is_accepted = TRUE, is_read = TRUE WHERE id = $1",
        invitation_id
    )
    user_row = await conn.fetchrow("SELECT invited_user_id FROM invitations WHERE id = $1", invitation_id)
    if user_row:
        await conn.execute(
            """
            INSERT INTO event_participants (event_id, user_id)
            VALUES ($1, $2)
            ON CONFLICT DO NOTHING
            """,
            event_id, user_row["invited_user_id"]
        )
    await conn.close()
    await callback.answer("–í—ã –ø—Ä–∏–Ω—è–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ!")
    try:
        await callback.message.edit_text("‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏–Ω—è—Ç–æ, –≤—ã –¥–æ–±–∞–≤–ª–µ–Ω—ã –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è.")  # type: ignore[attr-defined]
    except AttributeError:
        pass

# --- –•–µ–Ω–¥–ª–µ—Ä: –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ ---
@router.callback_query(lambda c: c.data and c.data.startswith("decline_invite:"))
async def handle_decline_invite(callback: CallbackQuery):
    if not callback.data:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    parts = callback.data.split(":")
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö!", show_alert=True)
        return
    invitation_id = int(parts[1])
    conn = await asyncpg.connect(DATABASE_URL)
    await conn.execute(
        "UPDATE invitations SET is_accepted = FALSE, is_read = TRUE WHERE id = $1",
        invitation_id
    )
    await conn.close()
    await callback.answer("–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")
    try:
        await callback.message.edit_text("‚ùå –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ.")  # type: ignore[attr-defined]
    except AttributeError:
        pass


@router.callback_query(lambda c: c.data and c.data.startswith("apply_event:"))
async def handle_apply_for_event(callback: CallbackQuery):
    data = callback.data
    if not data:
        await callback.answer("–û—à–∏–±–∫–∞: –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    parts = data.split(":")
    if len(parts) < 2:
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    event_id = int(parts[1])
    user = callback.from_user
    if not user:
        await callback.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.", show_alert=True)
        return

    telegram_id = user.id
    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", telegram_id)
    if not user_row:
        await conn.close()
        await callback.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
        return
    user_id = user_row["id"]

    await conn.execute(
        """
        INSERT INTO invitations (event_id, invited_user_id, inviter_user_id, is_read, is_accepted, created_at)
        VALUES ($1, $2, $3, FALSE, NULL, NOW())
        ON CONFLICT DO NOTHING
        """,
        event_id, user_id, user_id
    )
    await conn.close()

    if callback.message:
        msg = cast(Message, callback.message)
        try:
            await msg.edit_reply_markup(reply_markup=None)
            await msg.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞.")
        except Exception:
            pass
    else:
        await callback.answer("‚úÖ –ó–∞—è–≤–∫–∞ –ø–æ–¥–∞–Ω–∞.")

@router.message(StateFilter(VisitEvent.search_query))
async def process_search_query(message: Message, state: FSMContext):
    if not message.text:
        await message.answer("‚ö†Ô∏è –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    search_text = message.text.strip().lower()

    if not message.from_user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return

    telegram_id = message.from_user.id
    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", telegram_id)
    if not user_row:
        await conn.close()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    user_id = user_row["id"]

    results = await conn.fetch(
        """
        SELECT id, title, start_date, end_date, organizers
        FROM events
        WHERE author_id != $1
        AND is_draft = FALSE
        AND end_date >= CURRENT_DATE
        AND (
            title ILIKE '%' || $2 || '%' OR
            description ILIKE '%' || $2 || '%'
        )
        ORDER BY start_date
        """,
        user_id, search_text
    )


    await conn.close()
    await state.clear()

    if not results:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
        return

    for ev in results:
        text = (
            f"<b>{ev['title']}</b>\n"
            f"üìÖ {ev['start_date']} ‚Äì {ev['end_date']}\n"
            f"üë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {ev['organizers']}"
        )
        kb = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(
                        text="üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É",
                        callback_data=f"apply_event:{ev['id']}"
                    )
                ]
            ]
        )
        await message.answer(text, reply_markup=kb, parse_mode="HTML")
