from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardRemove,
    InlineKeyboardMarkup, InlineKeyboardButton,
    ReplyKeyboardMarkup, KeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter

import asyncpg
import os
from datetime import datetime
from dotenv import load_dotenv

from bot.keyboards.events.manage_event import (
    to_organizer_keyboard,
    answers_back_keyboard,
    answers_list_inline,
    author_participants_keyboard,
)
from bot.states.event_states import EventView
from bot.services.event_service import EventService
from bot.database.user_repo import get_user_by_telegram_id
from bot.handlers.events.view import handle_show_event

load_dotenv()
DATABASE_URL = os.getenv("DATABASE_URL")

router = Router()


class FakeCallback:
    """
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ handle_show_event.
    """
    def __init__(self, data: str, from_user, message: Message, bot):
        self.data = data
        self.from_user = from_user
        self.message = message
        self.bot = bot

    async def answer(self, *args, **kwargs):
        return None


@router.message(StateFilter(EventView.viewing_events), lambda m: m.text == "–ù–∞–ø–∏—Å–∞—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É")
async def start_writing_to_organizer(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    if event_id is None:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
        return

    conn = await asyncpg.connect(DATABASE_URL)
    ev_row = await conn.fetchrow("SELECT author_id FROM events WHERE id = $1", event_id)
    await conn.close()
    if ev_row is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.")
        return

    organizer_id = ev_row["author_id"]
    await state.update_data(writing_event_id=event_id, organizer_id=organizer_id)

    conn = await asyncpg.connect(DATABASE_URL)
    org_row = await conn.fetchrow("SELECT first_name, last_name FROM users WHERE id = $1", organizer_id)
    await conn.close()
    if org_row is not None:
        org_name = f"{org_row['first_name']} {org_row['last_name']}"
    else:
        org_name = "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä"

    kb = to_organizer_keyboard()
    await message.answer(
        f"–ù–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ {org_name}.\n–ú–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤:",
        reply_markup=kb
    )
    await state.set_state(EventView.writing_to_organizer)


@router.message(StateFilter(EventView.writing_to_organizer), lambda m: m.text == "‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")
async def cancel_write_to_organizer(message: Message, state: FSMContext):
    await state.update_data(writing_event_id=None, organizer_id=None)

    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    if event_id is None:
        await state.set_state(EventView.viewing_events)
        return

    fake_cb = FakeCallback(
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user,
        message=message,
        bot=message.bot
    )
    await handle_show_event(fake_cb, state)
    await state.set_state(EventView.viewing_events)


@router.message(StateFilter(EventView.writing_to_organizer))
async def save_message_to_organizer(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π —Ç–µ–∫—Å—Ç (–∏–ª–∏ ¬´‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é¬ª).")
        return
    if len(text) > 300:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ.")
        return

    data = await state.get_data()
    event_id = data.get("writing_event_id")
    organizer_id = data.get("organizer_id")
    from_user = message.from_user
    if event_id is None or organizer_id is None or from_user is None:
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(EventView.viewing_events)
        return

    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", from_user.id)
    if user_row is None:
        await conn.close()
        await message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await state.set_state(EventView.viewing_events)
        return
    participant_db_id = user_row["id"]

    service = EventService(conn)
    await service.save_participant_message(
        event_id=event_id,
        from_user_id=participant_db_id,
        to_user_id=organizer_id,
        text=text
    )
    await conn.close()

    await message.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É.", reply_markup=ReplyKeyboardRemove())
    await state.update_data(writing_event_id=None, organizer_id=None)

    data = await state.get_data()
    source = data.get("source", "active")
    page = data.get("page", 0)

    fake_cb = FakeCallback(
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user,
        message=message,
        bot=message.bot
    )
    await handle_show_event(fake_cb, state)
    await state.set_state(EventView.viewing_events)


@router.message(StateFilter(EventView.viewing_events), lambda m: m.text == "–û—Ç–≤–µ—Ç—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞")
async def show_answers_to_participant(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    if event_id is None:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
        return

    user = message.from_user
    if user is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    participant_telegram = user.id

    conn = await asyncpg.connect(DATABASE_URL)
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", participant_telegram)
    if user_row is None:
        await conn.close()
        await message.answer("‚ùå –£—á–∞—Å—Ç–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    participant_db_id = user_row["id"]

    ev_row = await conn.fetchrow("SELECT author_id FROM events WHERE id = $1", event_id)
    if ev_row is None:
        await conn.close()
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–æ–±—ã—Ç–∏–µ.")
        return
    organizer_id = ev_row["author_id"]

    service = EventService(conn)
    total = await service.count_answers_for_participant(event_id, participant_db_id, organizer_id)

    limit = 5
    offset = 0
    answers = await service.fetch_answers_for_participant(
        event_id, participant_db_id, organizer_id, limit, offset
    )
    await conn.close()

    if not answers:
        await message.answer("–ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞.", reply_markup=answers_back_keyboard())
        return

    kb = answers_list_inline(
        answers, limit, offset, event_id, participant_db_id, organizer_id
    )
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–≤–µ—Ç, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –ø–æ–ª–Ω–æ—Å—Ç—å—é:", reply_markup=kb)
    await state.update_data(
        paging_event_id=event_id,
        paging_participant_id=participant_db_id,
        paging_organizer_id=organizer_id,
        paging_offset=offset
    )
    await state.set_state(EventView.paging_answers)

@router.message(StateFilter(EventView.viewing_events), lambda m: m.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏")
async def author_open_participants(message: Message, state: FSMContext):
    """
    –≠—Ç–∞ –≤—å—é—à–∫–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è, –∫–æ–≥–¥–∞ –∞–≤—Ç–æ—Ä –Ω–∞–∂–∏–º–∞–µ—Ç ¬´üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏¬ª.
    –ü–æ–∫–∞–∑—ã–≤–∞–µ–º reply-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É:
    [–í–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]
    [–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤]
    [‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é]
    """
    data = await state.get_data()
    event_id = data.get("event_id")
    if event_id is None:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
        return

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –Ω–æ–≤—ã–π –ø–æ–¥—Ä–µ–∂–∏–º
    await message.answer("–ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å?", reply_markup=author_participants_keyboard())
    await state.set_state(EventView.viewing_participants_menu)

@router.message(StateFilter(EventView.viewing_participants_menu), lambda m: m.text == "–°–ø–∏—Å–æ–∫ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def author_show_participant_stats(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    if event_id is None:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
        return

    # –ü–æ–ª—É—á–∞–µ–º ID –∞–≤—Ç–æ—Ä–∞ (–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞) –ø–æ event_id
    conn = await asyncpg.connect(DATABASE_URL)
    ev_row = await conn.fetchrow("SELECT author_id FROM events WHERE id = $1", event_id)
    if ev_row is None:
        await conn.close()
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.set_state(EventView.viewing_events)
        return

    author_id = ev_row["author_id"]
    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –∞–≤—Ç–æ—Ä
    from_user = message.from_user
    if from_user is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
        return
    participant_telegram = from_user.id

    user_row = await conn.fetchrow(
        "SELECT id FROM users WHERE telegram_id = $1",
        participant_telegram
    )

    if user_row is None or user_row["id"] != author_id:
        await conn.close()
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
        await state.set_state(EventView.viewing_events)
        return

    # –°–æ–±–∏—Ä–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    service = EventService(conn)
    stats = await service.get_participant_stats(event_id)
    await conn.close()

    text_lines: list[str] = []
    # –û—Ç–¥–µ–ª—ã
    text_lines.append("üìä –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ –æ—Ç–¥–µ–ª–∞–º:")
    for dept, cnt in stats["departments"].items():
        text_lines.append(f"{dept} ‚Äî {cnt} —á–µ–ª.")
    # –ï—Å–ª–∏ —Å–ª–æ–≤–∞—Ä—å professions –ø—É—Å—Ç–æ–π, –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è–µ–º —ç—Ç—É —Å–µ–∫—Ü–∏—é
    if stats["professions"]:
        text_lines.append("")  # –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞
        text_lines.append("üìã –£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º:")
        for prof, cnt in stats["professions"].items():
            text_lines.append(f"{prof} ‚Äî {cnt} —á–µ–ª.")


    text = "\n".join(text_lines)
    # –ö–Ω–æ–ø–∫–∞ ¬´‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é¬ª
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(text, reply_markup=kb)
    # –û—Å—Ç–∞—ë–º—Å—è –≤ –º–µ–Ω—é –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤, –Ω–æ —Å–ª–µ–¥—É—é—â–∞—è ¬´‚Ü©Ô∏è –ö —Å–æ–±—ã—Ç–∏—é¬ª –≤–µ—Ä–Ω—ë—Ç –Ω–∞–∑–∞–¥
    await state.set_state(EventView.viewing_participants_menu)

@router.message(StateFilter(EventView.viewing_participants_menu), lambda m: m.text == "–í–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤")
async def author_show_questions(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    if event_id is None:
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –∑–∞–¥–∞–Ω–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∏–º, —á—Ç–æ —Ç–µ–∫—É—â–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ‚Äî –∞–≤—Ç–æ—Ä
    conn = await asyncpg.connect(DATABASE_URL)
    ev_row = await conn.fetchrow("SELECT author_id FROM events WHERE id = $1", event_id)
    if ev_row is None:
        await conn.close()
        await message.answer("‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        await state.set_state(EventView.viewing_events)
        return

    author_id = ev_row["author_id"]
    from_user = message.from_user
    if from_user is None:
        await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è.")
        return
    participant_telegram = from_user.id

    user_row = await conn.fetchrow(
        "SELECT id FROM users WHERE telegram_id = $1",
        participant_telegram
    )

    if user_row is None or user_row["id"] != author_id:
        await conn.close()
        await message.answer("‚ùå –¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –ø—Ä–æ—Å–º–∞—Ç—Ä–∏–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã.")
        await state.set_state(EventView.viewing_events)
        return

    # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –∏ –∑–∞–±–∏—Ä–∞–µ–º –ø–µ—Ä–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã
    service = EventService(conn)
    total = await service.count_unanswered_questions(event_id, author_id)
    limit = 5
    offset = 0
    questions = await service.fetch_unanswered_questions(event_id, author_id, limit, offset)
    await conn.close()

    if not questions:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤ –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.", reply_markup=answers_back_keyboard())
        await state.set_state(EventView.viewing_participants_menu)
        return

    # –°—Ç—Ä–æ–∏–º inline-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (–∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–µ—Ä–≤—ã–µ 3 —Å–ª–æ–≤–∞ + –¥–∞—Ç–∞)
    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for rec in questions:
        words = rec["message_text"].split()
        short = " ".join(words[:3]) + ("‚Ä¶" if len(words) > 3 else "")
        dt = rec["created_at"].date()
        if dt.year == datetime.today().year:
            date_label = f"{dt.day:02d}.{dt.month:02d}"
        else:
            date_label = f"{dt.day:02d}.{dt.month:02d}.{dt.year}"
        btn_text = f"{short} ({date_label})"
        cb = f"view_question:{rec['id']}:{event_id}:{author_id}:{offset}"
        kb.inline_keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=cb)])

    # –ü–∞–≥–∏–Ω–∞—Ü–∏—è: ¬´‚¨ÖÔ∏è¬ª –∏ ¬´‚û°Ô∏è¬ª, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    nav = []
    if offset >= limit:
        prev_offset = offset - limit
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_questions:{event_id}:{author_id}:{prev_offset}"))
    if len(questions) == limit:
        next_offset = offset + limit
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_questions:{event_id}:{author_id}:{next_offset}"))
    if nav:
        kb.inline_keyboard.append(nav)

    await message.answer("üì® –í—ã–±–µ—Ä–∏—Ç–µ –≤–æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ—á–∏—Ç–∞—Ç—å –∏ –æ—Ç–≤–µ—Ç–∏—Ç—å:", reply_markup=kb)
    await state.update_data(
        paging_event_id=event_id,
        paging_organizer_id=author_id,
        paging_offset_questions=offset
    )
    await state.set_state(EventView.paging_questions)

@router.callback_query(StateFilter(EventView.paging_questions), lambda c: c.data and c.data.startswith("page_questions:"))
async def page_questions(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    msg = callback.message
    if not isinstance(msg, Message):
        return

    # —Ä–∞–∑–±–∏—Ä–∞–µ–º callback.data, –≤—ã—Ç–∞—Å–∫–∏–≤–∞–µ–º event_id, organizer_id, offset
    if callback.data is None:
        return

    _, event_id_str, author_id_str, offset_str = callback.data.split(":")
    event_id = int(event_id_str)
    organizer_id = int(author_id_str)
    offset = int(offset_str)

    limit = 5
    conn = await asyncpg.connect(DATABASE_URL)
    service = EventService(conn)
    questions = await service.fetch_unanswered_questions(event_id, organizer_id, limit, offset)
    await conn.close()

    if not questions:
        return

    kb = InlineKeyboardMarkup(inline_keyboard=[])
    for rec in questions:
        words = rec["message_text"].split()
        short = " ".join(words[:3]) + ("‚Ä¶" if len(words) > 3 else "")
        dt = rec["created_at"].date()
        if dt.year == datetime.today().year:
            date_label = f"{dt.day:02d}.{dt.month:02d}"
        else:
            date_label = f"{dt.day:02d}.{dt.month:02d}.{dt.year}"
        btn_text = f"{short} ({date_label})"
        cb = f"view_question:{rec['id']}:{event_id}:{organizer_id}:{offset}"
        kb.inline_keyboard.append([InlineKeyboardButton(text=btn_text, callback_data=cb)])

    nav = []
    if offset >= limit:
        prev_offset = offset - limit
        nav.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"page_questions:{event_id}:{organizer_id}:{prev_offset}"))
    if len(questions) == limit:
        next_offset = offset + limit
        nav.append(InlineKeyboardButton(text="–í–ø–µ—Ä—ë–¥ ‚û°Ô∏è", callback_data=f"page_questions:{event_id}:{organizer_id}:{next_offset}"))
    if nav:
        kb.inline_keyboard.append(nav)

    try:
        await msg.edit_reply_markup(reply_markup=kb)
    except:
        await msg.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞...", reply_markup=kb)

    await state.update_data(paging_offset_questions=offset)
    await state.set_state(EventView.paging_questions)


@router.callback_query(StateFilter(EventView.viewing_events, EventView.paging_questions), lambda c: c.data and c.data.startswith("view_question:"))
async def view_single_question(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    #  ‚Üì —Å—Ä–∞–∑—É ‚Äú—Å—É–∂–∞–µ–º‚Äù —Ç–∏–ø:
    msg = callback.message
    if not isinstance(msg, Message):
        return

    if callback.data is None:
        return
    parts = callback.data.split(":")

    msg_id = int(parts[1])
    event_id = int(parts[2])
    organizer_id = int(parts[3])
    offset = int(parts[4])

    conn = await asyncpg.connect(DATABASE_URL)
    rec = await conn.fetchrow(
        """
        SELECT from_user_id, message_text, created_at
        FROM participant_messages
        WHERE id = $1
          AND event_id = $2
          AND to_user_id = $3
          AND is_answered = FALSE
        """,
        msg_id, event_id, organizer_id
    )
    # –£–∑–Ω–∞–µ–º –§–ò–û –∞–≤—Ç–æ—Ä–∞ –≤–æ–ø—Ä–æ—Å–∞
    user_row = None
    if rec:
        user_row = await conn.fetchrow(
            "SELECT first_name, last_name FROM users WHERE id = $1",
            rec["from_user_id"]
        )
    await conn.close()

    if rec is None or user_row is None:
        await msg.answer("‚ùå –í–æ–ø—Ä–æ—Å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    asker_name = f"{user_row['first_name']} {user_row['last_name']}"
    created_at = rec["created_at"].strftime("%d.%m.%Y %H:%M")
    text = (
        f"üìù <b>–í–æ–ø—Ä–æ—Å –æ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–∞ ({asker_name}, {created_at}):</b>\n"
        f"{rec['message_text']}\n\n"
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç (–∏–ª–∏ ¬´‚¨ÖÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º¬ª), –º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤:"
    )

    # –°—Ç–∞–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ ¬´–æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –≤–æ–ø—Ä–æ—Å¬ª
    await state.update_data(
        answering_msg_id=msg_id,
        answering_event_id=event_id,
        answering_participant_id=rec["from_user_id"],
        answering_offset=offset
    )
    await msg.answer(text, parse_mode="HTML", reply_markup=to_organizer_keyboard())
    await state.set_state(EventView.answering_question)



@router.message(StateFilter(EventView.answering_question))
async def save_answer_from_organizer(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    if not text:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–µ–ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç (–∏–ª–∏ ¬´‚¨ÖÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º¬ª).")
        return
    if len(text) > 300:
        await message.answer("–°–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç, –º–∞–∫—Å–∏–º—É–º 300 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∫—Ä–∞—Ç–∏—Ç–µ.")
        return

    data = await state.get_data()
    msg_id = data.get("answering_msg_id")
    event_id = data.get("answering_event_id")
    participant_db_id = data.get("answering_participant_id")
    offset = data.get("answering_offset")
    if not all([msg_id, event_id, participant_db_id]):
        await message.answer("–û—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        await state.set_state(EventView.viewing_participants_menu)
        return

    conn = await asyncpg.connect(DATABASE_URL)
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç: –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
    answered_at = datetime.now()
    await conn.execute(
        """
        UPDATE participant_messages
        SET answer_text = $1,
            answered_at = $2,
            is_answered = TRUE
        WHERE id = $3
        """,
        text, answered_at, msg_id
    )
    await conn.close()

    await message.answer("‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω —É—á–∞—Å—Ç–Ω–∏–∫—É.", reply_markup=author_participants_keyboard())

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É ¬´–í–æ–ø—Ä–æ—Å–æ–≤ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤¬ª
    data = await state.get_data()
    event_id = data.get("answering_event_id")
    organizer_id = data.get("answering_organizer_id") or data.get("paging_organizer_id")
    offset = data.get("answering_offset", 0)

    # –°–Ω–æ–≤–∞ –ø—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º paging_questions —Å —Ç–µ–º –∂–µ offset
    fake_cb = FakeCallback(
        data=f"page_questions:{event_id}:{organizer_id}:{offset}",
        from_user=message.from_user,
        message=message,
        bot=message.bot
    )
    await page_questions(fake_cb, state)
    await state.set_state(EventView.paging_questions)


@router.callback_query(StateFilter(EventView.paging_answers), lambda c: c.data and c.data.startswith("page_answers:"))
async def page_answers(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    assert callback.data is not None
    _, event_id_str, part_id_str, org_id_str, offset_str = callback.data.split(":")
    event_id = int(event_id_str)
    participant_db_id = int(part_id_str)
    organizer_id = int(org_id_str)
    offset = int(offset_str)

    limit = 5
    conn = await asyncpg.connect(DATABASE_URL)
    service = EventService(conn)
    answers = await service.fetch_answers_for_participant(
        event_id, participant_db_id, organizer_id, limit, offset
    )
    await conn.close()

    if not answers:
        return

    kb = answers_list_inline(
        answers, limit, offset, event_id, participant_db_id, organizer_id
    )

    from aiogram.types import Message as AiogramMessage
    if callback.message is not None and isinstance(callback.message, AiogramMessage):
        try:
            await callback.message.edit_reply_markup(reply_markup=kb)
        except:
            await callback.message.answer("–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞...", reply_markup=kb)

    await state.update_data(paging_offset=offset)
    await state.set_state(EventView.paging_answers)


@router.callback_query(StateFilter(EventView.paging_answers), lambda c: c.data and c.data.startswith("view_answer:"))
async def view_single_answer(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    assert callback.data is not None
    parts = callback.data.split(":")
    msg_id = int(parts[1])
    event_id = int(parts[2])
    participant_db_id = int(parts[3])
    organizer_id = int(parts[4])
    offset = int(parts[5])

    conn = await asyncpg.connect(DATABASE_URL)
    rec = await conn.fetchrow(
        """
        SELECT message_text, answer_text, answered_at
        FROM participant_messages
        WHERE id = $1
          AND event_id = $2
          AND from_user_id = $3
          AND to_user_id = $4
          AND is_answered = TRUE
        """,
        msg_id, event_id, participant_db_id, organizer_id
    )
    await conn.close()
    if rec is None:
        from aiogram.types import Message as AiogramMessage
        if callback.message is not None and isinstance(callback.message, AiogramMessage):
            await callback.message.answer("‚ùå –û—Ç–≤–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    answered_at = rec["answered_at"]
    assert answered_at is not None
    answered_label = answered_at.strftime("%d.%m.%Y %H:%M")
    text = (
        f"üì® <b>–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:</b>\n"
        f"{rec['message_text']}\n\n"
        f"‚úÖ <b>–û—Ç–≤–µ—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ ({answered_label}):</b>\n"
        f"{rec['answer_text']}"
    )
    kb = answers_back_keyboard()
    from aiogram.types import Message as AiogramMessage
    if callback.message is not None and isinstance(callback.message, AiogramMessage):
        await callback.message.answer(text, parse_mode="HTML", reply_markup=kb)
    await state.set_state(EventView.viewing_events)


@router.message(StateFilter(EventView.viewing_events), lambda m: m.text == "‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")
async def back_to_event_from_chat(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("paging_event_id") or data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    if event_id is None:
        await state.set_state(EventView.viewing_events)
        return

    fake_cb = FakeCallback(
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user,
        message=message,
        bot=message.bot
    )
    await handle_show_event(fake_cb, state)
    await state.set_state(EventView.viewing_events)


async def get_participant_stats(self, event_id: int) -> dict:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å –≤–∏–¥–∞:
    {
        "departments": { "–û—Ç–¥–µ–ª1": 3, "–û—Ç–¥–µ–ª2": 1, ... },
        "professions": { "–ü—Ä–æ–≥—Ä–∞–º–º–∏—Å—Ç": 3, "–≠–∫–æ–Ω–æ–º–∏—Å—Ç": 1, ... }
    }
    """
    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É —Ç–∞–±–ª–∏—Ü—ã users –µ—Å—Ç—å –ø–æ–ª—è department –∏ profession
    rows = await self.conn.fetch(
        """
        SELECT u.department, u.profession
        FROM users AS u
        JOIN event_participants AS ep ON ep.user_id = u.id
        WHERE ep.event_id = $1
        """,
        event_id
    )
    dept_counts: dict[str, int] = {}
    prof_counts: dict[str, int] = {}
    for r in rows:
        d = r["department"] or "–ù–µ —É–∫–∞–∑–∞–Ω"
        p = r["profession"] or "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
        dept_counts[d] = dept_counts.get(d, 0) + 1
        prof_counts[p] = prof_counts.get(p, 0) + 1
    return {"departments": dept_counts, "professions": prof_counts}

async def fetch_unanswered_questions(self, event_id: int, organizer_id: int, limit: int, offset: int) -> list[asyncpg.Record]:
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç list –∑–∞–ø–∏—Å–µ–π (id, message_text, from_user_id, created_at)
    –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤ (is_answered = FALSE), –æ—Ç—Å–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ created_at DESC.
    """
    return await self.conn.fetch(
        """
        SELECT id, message_text, from_user_id, created_at
        FROM participant_messages
        WHERE event_id = $1
          AND to_user_id = $2
          AND is_answered = FALSE
        ORDER BY created_at DESC
        LIMIT $3 OFFSET $4
        """,
        event_id, organizer_id, limit, offset
    )

async def count_unanswered_questions(self, event_id: int, organizer_id: int) -> int:
    row = await self.conn.fetchrow(
        """
        SELECT COUNT(*) AS cnt
        FROM participant_messages
        WHERE event_id = $1
          AND to_user_id = $2
          AND is_answered = FALSE
        """,
        event_id, organizer_id
    )
    return row["cnt"] if row else 0
    
# –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏—è –∏–∑ –º–µ–Ω—é ¬´–£—á–∞—Å—Ç–Ω–∏–∫–∏¬ª –∏–ª–∏ ¬´–í–æ–ø—Ä–æ—Å—ã¬ª
@router.message(StateFilter(EventView.viewing_participants_menu), lambda m: m.text == "‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")
@router.message(StateFilter(EventView.viewing_events),            lambda m: m.text == "‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")
@router.message(StateFilter(EventView.paging_questions),          lambda m: m.text == "‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")
@router.message(StateFilter(EventView.answering_question),         lambda m: m.text == "‚¨ÖÔ∏è –ö —Å–æ–±—ã—Ç–∏—é")
@router.message(StateFilter(EventView.paging_questions),          lambda m: m.text == "‚¨ÖÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º")
async def back_to_event_or_questions(message: Message, state: FSMContext):
    data = await state.get_data()
    # –ï—Å–ª–∏ –º—ã –±—ã–ª–∏ –≤ –ø–æ–¥–º–µ–Ω—é ¬´–ü–∞–≥–∏–Ω–∞—Ü–∏—è –≤–æ–ø—Ä–æ—Å–æ–≤¬ª ‚Äî –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É ¬´–í–æ–ø—Ä–æ—Å—ã —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤¬ª
    if await state.get_state() == EventView.paging_questions and message.text == "‚¨ÖÔ∏è –ö –≤–æ–ø—Ä–æ—Å–∞–º":
        event_id = data.get("paging_event_id")
        organizer_id = data.get("paging_organizer_id")
        offset = data.get("paging_offset_questions", 0)
        if event_id and organizer_id is not None:
            fake_cb = FakeCallback(
                data=f"page_questions:{event_id}:{organizer_id}:{offset}",
                from_user=message.from_user,
                message=message,
                bot=message.bot
            )
            await page_questions(fake_cb, state)
            await state.set_state(EventView.paging_questions)
            return

    # –ò–Ω–∞—á–µ ‚Äî –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Å–º–æ—Ç—Ä—É —Å–æ–±—ã—Ç–∏—è
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)
    if event_id is None:
        await state.set_state(EventView.viewing_events)
        return

    fake_cb = FakeCallback(
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user,
        message=message,
        bot=message.bot
    )
    await handle_show_event(fake_cb, state)
    await state.set_state(EventView.viewing_events)
