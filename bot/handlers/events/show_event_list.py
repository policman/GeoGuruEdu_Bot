from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
import asyncpg
from datetime import datetime
from bot.config import DATABASE_URL
from .format_event_dates import format_event_dates
#from .get_user_by_telegram_id import get_user_by_telegram_id
from aiogram import Bot
from typing import cast, Any
from bot.states.event_states import VisitEvent
from bot.keyboards.events.view_event import visit_event_keyboard
from aiogram import Router, F
from bot.database.user_repo import get_user_by_telegram_id  # –¥–æ–±–∞–≤—å –≤ –∏–º–ø–æ—Ä—Ç—ã

# –•—Ä–∞–Ω–∏–º ID —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
deleted_messages: dict[int, list[int]] = {}

router = Router()

EVENTS_PER_PAGE = 3

async def show_event_list(msg: Message, state: FSMContext):
    if not isinstance(msg, Message):
        return
    
    bot = cast(Bot, msg.bot)
    user_id_tg = msg.chat.id

    print("üí¨ Telegram ID:", user_id_tg)
    if user_id_tg is None:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    await clear_event_messages(bot, user_id_tg, msg.chat.id)

    # –£–¥–∞–ª—è–µ–º –≤—Å–µ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ –±—ã–ª–∏)
    if user_id_tg not in deleted_messages:
        deleted_messages[user_id_tg] = []
    else:
        for mid in deleted_messages[user_id_tg]:
            try:
                await bot.delete_message(chat_id=msg.chat.id, message_id=mid)
            except:
                pass
        deleted_messages[user_id_tg] = []


    if not msg.from_user:
        await msg.answer("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.")
        return
    conn = await asyncpg.connect(DATABASE_URL)
    user = await get_user_by_telegram_id(conn, msg.chat.id)

    if user is None:
        await msg.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await conn.close()
        return

    user_id: int = user["id"]  # —Ç–µ–ø–µ—Ä—å Pylance –Ω–µ —Ä—É–≥–∞–µ—Ç—Å—è


    data = await state.get_data()
    page = data.get("page", 0)
    organizer = data.get("filter_organizer")
    min_price = data.get("filter_min_price")
    max_price = data.get("filter_max_price")
    start_date_str = data.get("filter_start_date")
    end_date_str = data.get("filter_end_date")
    search_query = data.get("search_query")

    start_date = None
    end_date = None
    try:
        if start_date_str:
            start_date = datetime.strptime(start_date_str, "%Y-%m-%d").date()
        if end_date_str:
            end_date = datetime.strptime(end_date_str, "%Y-%m-%d").date()
    except ValueError:
        await conn.close()
        await msg.answer("–û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∞ –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: YYYY-MM-DD")
        return

    filters = ["author_id IS DISTINCT FROM $1", "is_draft = FALSE", "end_date >= CURRENT_DATE"]

    params: list[Any] = [user_id]

    if organizer:
        filters.append(f"organizers ILIKE '%' || ${len(params)+1} || '%'")
        params.append(organizer)
    if min_price is not None:
        filters.append(f"price >= ${len(params)+1}")
        params.append(min_price)
    if max_price is not None:
        filters.append(f"price <= ${len(params)+1}")
        params.append(max_price)
    if start_date:
        filters.append(f"start_date >= ${len(params)+1}")
        params.append(start_date.isoformat())
    if end_date:
        filters.append(f"end_date <= ${len(params)+1}")
        params.append(end_date.isoformat())
    if search_query:
        filters.append(f"(title ILIKE '%' || ${len(params)+1} || '%' OR description ILIKE '%' || ${len(params)+1} || '%')")
        params.append(search_query)

    where_clause = " AND ".join(filters)
    offset = page * EVENTS_PER_PAGE

    # –†–∞–∑–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
    params_for_count = params.copy()  # –±–µ–∑ offset
    params_for_select = params + [offset]  # —Å offset

    query = f"""
        SELECT id, title, description, start_date, end_date, organizers, price, photo, author_id
        FROM events
        WHERE {where_clause}
        ORDER BY start_date
        LIMIT {EVENTS_PER_PAGE} OFFSET ${len(params_for_select)}
    """

    events = await conn.fetch(query, *params_for_select)

    total_events = await conn.fetchval(
        f"SELECT COUNT(*) FROM events WHERE {where_clause}",
        *params_for_count
    )
    total_pages = max((total_events + EVENTS_PER_PAGE - 1) // EVENTS_PER_PAGE, 1)



    participant_ids = {
        row['event_id']
        for row in await conn.fetch("""
            SELECT event_id FROM event_participants
            WHERE user_id = $1
        """, user_id)
    }

    applied_ids = {
        row['event_id']
        for row in await conn.fetch("""
            SELECT event_id FROM invitations
            WHERE invited_user_id = $1
            AND inviter_user_id IS NULL
            AND is_accepted IS NULL
        """, user_id)
    }


    await conn.close()

    # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –ø–æ –≤—Å–µ–º event_id –æ–¥–Ω–æ–π –≤—ã–±–æ—Ä–∫–æ–π
    event_ids = [ev["id"] for ev in events]
    participant_counts = {}

    if event_ids:
        conn = await asyncpg.connect(DATABASE_URL)
        rows = await conn.fetch("""
            SELECT event_id, COUNT(*) AS count
            FROM event_participants
            WHERE event_id = ANY($1::int[])
            GROUP BY event_id
        """, event_ids)
        await conn.close()

        participant_counts = {row["event_id"]: row["count"] for row in rows}

    if not events:
        msg_sent = await msg.answer("–ù–µ—Ç —Å–æ–±—ã—Ç–∏–π –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º —Ñ–∏–ª—å—Ç—Ä–∞–º.")
        deleted_messages[user_id_tg].append(msg_sent.message_id)
        return

    for ev in events:
        print("üîé applied_ids:", applied_ids)
        print("üîé participant_ids:", participant_ids)

        print(f"Event ID: {ev['id']}, Title: {ev['title']}, Author ID: {ev.get('author_id')}, Current User ID: {user_id}")

        caption = f"<b>{ev['title']}</b>\n<i>{ev['description']}</i>\n\nüìÖ {format_event_dates(ev['start_date'], ev['end_date'])}\nüë§ –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {ev['organizers']}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {'–±–µ—Å–ø–ª–∞—Ç–Ω–æ' if ev['price'] == 0 else str(ev['price']) + '‚ÇΩ'}"
        participant_count = participant_counts.get(ev["id"], 0)
        caption += f"\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {participant_count}"

        # Inline-–∫–Ω–æ–ø–∫–∞
        if ev["id"] in participant_ids:
            kb = InlineKeyboardMarkup(inline_keyboard=[])
            caption += "\n\n‚úÖ –í—ã —É—á–∞—Å—Ç–≤—É–µ—Ç–µ"
        elif ev["id"] in applied_ids:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚è≥ –í –æ–±—Ä–∞–±–æ—Ç–∫–µ", callback_data="noop")]]
            )
            caption += "\n\n‚è≥ –ó–∞—è–≤–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ"
        else:
            kb = InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üì® –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data=f"apply_event:{ev['id']}")]]
            )


        # –û—Ç–ø—Ä–∞–≤–∫–∞ –æ–¥–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –º–µ–¥–∏–∞ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ–º
        # –°–Ω–∞—á–∞–ª–∞ –ø—ã—Ç–∞–µ–º—Å—è –¥–æ—Å—Ç–∞—Ç—å file_id –∏–∑ ev["photo"]
        file_id = None
        raw_photo = ev.get("photo")

        # –í–∞—Ä–∏–∞–Ω—Ç A: –µ—Å–ª–∏ –≤ –ë–î –≤—ã —Ö—Ä–∞–Ω–∏—Ç–µ photo –∫–∞–∫ –æ–¥–∏–Ω–æ—á–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ (TEXT)
        if isinstance(raw_photo, str) and raw_photo.strip():
            file_id = raw_photo.strip()

        # –í–∞—Ä–∏–∞–Ω—Ç B: –µ—Å–ª–∏ –≤ –ë–î photo —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ –≤–∏–¥–µ –º–∞—Å—Å–∏–≤–∞ (TEXT[]), —Ç–æ raw_photo –±—É–¥–µ—Ç list
        elif isinstance(raw_photo, (list, tuple)) and raw_photo:
            candidate = raw_photo[0]
            if isinstance(candidate, str) and candidate.strip():
                file_id = candidate.strip()

        # –¢–µ–ø–µ—Ä—å –ø—Ä–æ–≤–µ—Ä—è–µ–º, —É–¥–∞–ª–æ—Å—å –ª–∏ –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–æ–∫—É –ø–æ–¥—Ö–æ–¥—è—â–µ–π –¥–ª–∏–Ω—ã
        if file_id and len(file_id) > 20:
            # –ü–æ–ø—Ä–æ–±—É–µ–º –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–º–µ–Ω–Ω–æ —ç—Ç–æ—Ç file_id
            try:
                media_msg = await bot.send_photo(
                    chat_id=msg.chat.id,
                    photo=file_id,
                    caption=caption,
                    parse_mode="HTML",
                    reply_markup=kb
                )
            except Exception:
                # –ï—Å–ª–∏ Telegram —Å–Ω–æ–≤–∞ –≤–µ—Ä–Ω—ë—Ç –æ—à–∏–±–∫—É (–Ω–µ–≤–µ—Ä–Ω—ã–π file_id), –æ—Ç–ø—Ä–∞–≤–∏–º –ø—Ä–æ—Å—Ç–æ —Ç–µ–∫—Å—Ç
                media_msg = await bot.send_message(
                    chat_id=msg.chat.id,
                    text=caption,
                    parse_mode="HTML",
                    reply_markup=kb
                )
        else:
            # –ï—Å–ª–∏ file_id –Ω–µ–≤–∞–ª–∏–¥–µ–Ω –∏–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç
            media_msg = await bot.send_message(
                chat_id=msg.chat.id,
                text=caption,
                parse_mode="HTML",
                reply_markup=kb
            )


        deleted_messages[user_id_tg].append(media_msg.message_id)



    if total_pages > 1:
        nav_row = list(filter(None, [
            InlineKeyboardButton(text="‚¨ÖÔ∏è", callback_data="page:prev") if page > 0 else None,
            InlineKeyboardButton(text=f"{page + 1}/{total_pages}", callback_data="noop"),
            InlineKeyboardButton(text="‚û°Ô∏è", callback_data="page:next") if (page + 1) * EVENTS_PER_PAGE < total_events else None,
        ]))

        msg_sent = await msg.answer(text="–ù–∞–≤–∏–≥–∞—Ü–∏—è:", reply_markup=InlineKeyboardMarkup(inline_keyboard=[nav_row]))
        deleted_messages[user_id_tg].append(msg_sent.message_id)

    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤
    filter_text_lines = ["<b>–ê–∫—Ç–∏–≤–Ω—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã:</b>"]
    if organizer:
        filter_text_lines.append(f"–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä: {organizer}")
    if min_price is not None or max_price is not None:
        price_str = f"{min_price or 0} ‚Äì {max_price or 0} ‚ÇΩ"
        filter_text_lines.append(f"–¶–µ–Ω–∞: {price_str}")
    if start_date_str or end_date_str:
        date_range = f"{start_date_str or '...'} ‚Äî {end_date_str or '...'}"
        filter_text_lines.append(f"–î–∞—Ç—ã: {date_range}")
    if search_query:
        filter_text_lines.append(f"–ü–æ–∏—Å–∫: ¬´{search_query}¬ª")

    filter_caption = "\n".join(filter_text_lines)

    filter_kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä", callback_data="filter:organizer"),
                InlineKeyboardButton(text="–¶–µ–Ω–∞", callback_data="filter:price"),
                InlineKeyboardButton(text="–î–∞—Ç–∞", callback_data="filter:date")
            ],
            [InlineKeyboardButton(text="üîÑ –°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä—ã", callback_data="filter:reset")]
        ]
    )

    msg_sent = await msg.answer(filter_caption, reply_markup=filter_kb, parse_mode="HTML")
    deleted_messages[user_id_tg].append(msg_sent.message_id)

    deleted_messages[user_id_tg].append(msg_sent.message_id)

@router.message(F.text == "–í—ã–π—Ç–∏ –∏–∑ —Å–ø–∏—Å–∫–∞")
async def exit_event_list(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –º–µ–Ω—é '–ü–æ—Å–µ—Ç–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ'", reply_markup=visit_event_keyboard)


async def clear_event_messages(bot: Bot, user_id: int, chat_id: int):
    for mid in deleted_messages.get(user_id, []):
        try:
            await bot.delete_message(chat_id=chat_id, message_id=mid)
        except:
            pass
    deleted_messages[user_id] = []
