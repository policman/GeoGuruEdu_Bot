# bot/handlers/events/invite_event.py

from aiogram import Router
from aiogram.types import Message
from aiogram.fsm.context import FSMContext
import asyncpg
from bot.config import DATABASE_URL
import datetime

router = Router()

@router.message(lambda m: m.text == "üì® –†–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
async def handle_send_invitations(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    if not event_id:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å–æ–±—ã—Ç–∏–µ –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")
        return

    if not message.from_user:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram.")
        return

    telegram_id = message.from_user.id

    conn = await asyncpg.connect(DATABASE_URL)
    # –ü–æ–ª—É—á–∞–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã users
    user_row = await conn.fetchrow("SELECT id FROM users WHERE telegram_id = $1", telegram_id)
    if not user_row:
        await conn.close()
        await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.")
        return
    user_id = user_row['id']

    # –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ä–∞–∑–æ—Å–ª–∞—Ç—å –º–æ–∂–Ω–æ –Ω–µ —á–∞—â–µ, —á–µ–º —Ä–∞–∑ –≤ 5 —Å–µ–∫—É–Ω–¥
    row = await conn.fetchrow(
        """
        SELECT created_at FROM invitations
        WHERE event_id = $1 AND inviter_user_id = $2
        ORDER BY created_at DESC LIMIT 1
        """,
        event_id, user_id
    )
    if row and (datetime.datetime.now() - row['created_at']).total_seconds() < 5:
        await conn.close()
        await message.answer("–ü–æ–¥–æ–∂–¥–∏—Ç–µ 5 —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π —Ä–∞—Å—Å—ã–ª–∫–æ–π –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π.")
        return

    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    users = await conn.fetch(
        """
        SELECT id FROM users
        WHERE id != $1
          AND id NOT IN (
              SELECT invited_user_id FROM invitations
              WHERE event_id = $2 AND is_accepted = FALSE
          )
        """,
        user_id, event_id
    )
    invited_count = 0
    for user in users:
        await conn.execute(
            """
            INSERT INTO invitations (event_id, invited_user_id, inviter_user_id, is_read, is_accepted, created_at)
            VALUES ($1, $2, $3, FALSE, NULL, $4)
            ON CONFLICT DO NOTHING
            """,
            event_id, user["id"], user_id, datetime.datetime.now()
        )
        invited_count += 1
    await conn.close()
    await message.answer(f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã! ({invited_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)")

from aiogram import F

@router.message(F.text == "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏")
async def show_event_participants(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")

    if not event_id:
        await message.answer("‚ö†Ô∏è –°–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.")
        return

    conn = await asyncpg.connect(DATABASE_URL)
    rows = await conn.fetch("""
        SELECT u.username, u.first_name, u.last_name
        FROM event_participants ep
        JOIN users u ON ep.user_id = u.id
        WHERE ep.event_id = $1
    """, event_id)


    await conn.close()

    if not rows:
        await message.answer("‚ùå –ü–æ–∫–∞ –Ω–∏–∫—Ç–æ –Ω–µ –ø—Ä–∏–Ω—è–ª –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ.")
        return

    text = "üë• –£—á–∞—Å—Ç–Ω–∏–∫–∏ —Å–æ–±—ã—Ç–∏—è:\n\n" + "\n".join(
        f"‚Ä¢ {r['last_name']} {r['first_name']} (@{r['username']})" if r['username'] else f"‚Ä¢ {r['last_name']} {r['first_name']}"
        for r in rows
    )
    await message.answer(text)

