from aiogram import Router, F
from aiogram.types import Message, ReplyKeyboardRemove, ReplyKeyboardMarkup, KeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
import asyncpg
from datetime import datetime

from bot.config import DATABASE_URL
from bot.states.event_states import InvitationStates
from bot.keyboards.events.manage_event import (
    invite_method_keyboard,
    invite_confirm_keyboard,
)
from bot.handlers.events.view import handle_show_event

router = Router()


# 1) –ù–∞–∂–∞—Ç–∏–µ ¬´üì® –†–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è¬ª ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é –≤—ã–±–æ—Ä–∞ –º–µ—Ç–æ–¥–∞
@router.message(lambda m: m.text == "üì® –†–∞–∑–æ—Å–ª–∞—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è")
async def choose_invite_method(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    if not event_id:
        await message.answer("–û—à–∏–±–∫–∞: —Å–æ–±—ã—Ç–∏–µ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ.", reply_markup=ReplyKeyboardRemove())
        return

    await state.set_state(InvitationStates.CHOOSING_METHOD)
    await message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Ä–∞—Å—Å—ã–ª–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π:",
        reply_markup=invite_method_keyboard()
    )


# 2) –û–±—Ä–∞–±–æ—Ç–∫–∞ ¬´‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—é¬ª –≤ –ª—é–±–æ–º —Å—É–±—Å–æ—Å—Ç–æ—è–Ω–∏–∏
@router.message(F.text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥ –∫ —Å–æ–±—ã—Ç–∏—é")
async def cancel_back_to_event(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–æ–±—ã—Ç–∏—é ‚Ä¶", reply_markup=ReplyKeyboardRemove())

    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
            self.bot = message.bot

        async def answer(self, *args, **kwargs):
            return None


    fake = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )
    await handle_show_event(fake, state)



# ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ
# 3) ¬´üìë –ü–æ –æ—Ç–¥–µ–ª–∞–º/–ø—Ä–æ—Ñ–∏–ª—é¬ª ‚Üí –≤–≤–æ–¥ –æ—Ç–¥–µ–ª–æ–≤
@router.message(StateFilter(InvitationStates.CHOOSING_METHOD), F.text == "üìë –ü–æ –æ—Ç–¥–µ–ª–∞–º/–ø—Ä–æ—Ñ–∏–ª—é")
async def invite_by_depts_profiles(message: Message, state: FSMContext):
    await state.set_state(InvitationStates.ENTER_DEPARTMENTS)
    # –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞: —Ç–æ–ª—å–∫–æ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–¥–µ–ª—ã —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –û—Ç–¥–µ–ª1, –û—Ç–¥–µ–ª2) –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=kb
    )

@router.message(StateFilter(InvitationStates.ENTER_DEPARTMENTS))
async def enter_departments(message: Message, state: FSMContext):
    text = (message.text or "").strip()
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª
    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(departments=[])
    else:
        depts = [d.strip() for d in text.split(",") if d.strip()]
        await state.update_data(departments=depts)

    # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –≤–≤–æ–¥—É –ø—Ä–æ—Ñ–∏–ª–µ–π
    await state.set_state(InvitationStates.ENTER_PROFILES)
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å")]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await message.answer(
        "–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –ø—Ä–æ—Ñ–µ—Å—Å–∏–∏ (–ø—Ä–æ—Ñ–∏–ª–∏) —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª:",
        reply_markup=kb
    )


@router.message(StateFilter(InvitationStates.ENTER_PROFILES))
async def enter_profiles(message: Message, state: FSMContext):
    text = (message.text or "").strip()

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–∂–∞–ª ¬´–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å¬ª, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –ø—Ä–æ—Ñ–∏–ª–µ–π
    if text.lower() == "–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å":
        await state.update_data(profiles=[])
    else:
        profs = [p.strip() for p in text.split(",") if p.strip()]
        await state.update_data(profiles=profs)

    data = await state.get_data()
    depts = data.get("departments", [])
    profs = data.get("profiles", [])
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    # –ï—Å–ª–∏ –∏ –æ—Ç–¥–µ–ª—ã, –∏ –ø—Ä–æ—Ñ–∏–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ‚Üí —Å—Ä–∞–∑—É –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫ —Å–æ–±—ã—Ç–∏—é
    if not depts and not profs:
        await state.clear()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —ç–∫—Ä–∞–Ω—É —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ FakeCallback
        class FakeCallback:
            def __init__(self, message, data, from_user):
                self.message = message
                self.data = data
                self.from_user = from_user
                self.bot = message.bot

            async def answer(self, *args, **kwargs):
                return None

        fake = FakeCallback(
            message=message,
            data=f"event:{event_id}:{source}:{page}",
            from_user=message.from_user
        )
        await handle_show_event(fake, state)
        return

    # –ò–Ω–∞—á–µ ‚Äî –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–≤–æ–¥–∫—É –∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É ¬´‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å / ‚ùå –û—Ç–º–µ–Ω–∞¬ª
    summary = (
        f"–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –∏–∑ –æ—Ç–¥–µ–ª–æ–≤:\n"
        f"{', '.join(depts) if depts else '(–Ω–µ —É–∫–∞–∑–∞–Ω)'}\n\n"
        f"–∏ –ø—Ä–æ—Ñ–µ—Å—Å–∏—è–º:\n{', '.join(profs) if profs else '(–Ω–µ —É–∫–∞–∑–∞–Ω—ã)'}"
    )
    await state.set_state(InvitationStates.CONFIRM_DEPTS_PROFS)
    await message.answer(
        summary + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É?",
        reply_markup=invite_confirm_keyboard()
    )



@router.message(StateFilter(InvitationStates.CONFIRM_DEPTS_PROFS), F.text == "‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å")
async def send_by_depts_profiles(message: Message, state: FSMContext):
    data = await state.get_data()
    depts = data.get("departments", [])
    profs = data.get("profiles", [])
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    user = message.from_user
    if user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    inviter_telegram = user.id
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow(
        "SELECT id FROM users WHERE telegram_id = $1",
        inviter_telegram
    )
    if not row:
        await conn.close()
        await message.answer("–ê–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    inviter_user_id = row["id"]

    # –ï—Å–ª–∏ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã ‚Äî —É—Å–ª–æ–≤–∏–µ `ANY([])` –≤–µ—Ä–Ω—ë—Ç false, –Ω–æ –º—ã —Ö–æ—Ç–∏–º –¥–æ–ø—É—Å—Ç–∏—Ç—å
    # —Ä–∞—Å—Å—ã–ª–∫—É ¬´–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –æ—Ç–¥–µ–ª–∞–º¬ª –∏–ª–∏ ¬´–±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –ø—Ä–æ—Ñ–∏–ª—è–º¬ª.
    # –ü–æ—ç—Ç–æ–º—É —Å—Ç—Ä–æ–∏–º WHERE —Ç–∞–∫, —á—Ç–æ –µ—Å–ª–∏ —Å–ø–∏—Å–∫–∏ –ø—É—Å—Ç—ã, —ç—Ç—É —á–∞—Å—Ç—å –ø—Ä–æ–ø—É—Å–∫–∞–µ–º:
    where_clauses = []
    params = []
    idx = 1

    if depts:
        where_clauses.append(f"department = ANY(${idx}::TEXT[])")
        params.append(depts)
        idx += 1

    if profs:
        where_clauses.append(f"position = ANY(${idx}::TEXT[])")
        params.append(profs)
        idx += 1

    # –î–æ–±–∞–≤–ª—è–µ–º —É—Å–ª–æ–≤–∏–µ ¬´–Ω–µ –∞–≤—Ç–æ—Ä¬ª
    where_clauses.append(f"id != ${idx}")
    params.append(inviter_user_id)
    idx += 1

    where_sql = " OR ".join(where_clauses) if where_clauses else f"id != ${idx-1}"

    sql = f"SELECT telegram_id FROM users WHERE {where_sql}"
    rows = await conn.fetch(sql, *params)

    invited = 0
    bot = message.bot
    for record in rows:
        tgid = record.get("telegram_id")
        if bot is None or tgid is None:
            continue
        try:
            await bot.send_message(
                chat_id=tgid,
                text=f"üì£ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (ID {event_id})"
            )
            invited += 1
        except Exception:
            pass

    await conn.close()

    await message.answer(
        f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ({invited} —á–µ–ª.).",
        reply_markup=ReplyKeyboardRemove()
    )

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –º–µ–Ω—é —Å–æ–±—ã—Ç–∏—è
    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
            self.bot = message.bot

        async def answer(self, *args, **kwargs):
            return None

    fake = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )

    await state.clear()
    await handle_show_event(fake, state)


@router.message(StateFilter(InvitationStates.CONFIRM_DEPTS_PROFS), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_by_depts_profiles(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
            self.bot = message.bot

        async def answer(self, *args, **kwargs):
            return None

    fake = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )

    await state.clear()
    await handle_show_event(fake, state)



# 4) ¬´üë• –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º¬ª
@router.message(StateFilter(InvitationStates.CHOOSING_METHOD), F.text == "üë• –í—Å–µ–º —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º")
async def invite_colleagues(message: Message, state: FSMContext):
    await state.set_state(InvitationStates.CONFIRM_COLLEAGUES)
    await message.answer(
        "–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Å —Ç–µ–º –∂–µ \"–ú–µ—Å—Ç–æ–º —Ä–∞–±–æ—Ç—ã\", —á—Ç–æ —É –≤–∞—Å.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=invite_confirm_keyboard()
    )

@router.message(StateFilter(InvitationStates.CONFIRM_COLLEAGUES), F.text == "‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å")
async def send_to_colleagues(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    user = message.from_user
    if user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    inviter_telegram = user.id
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow(
        "SELECT id, place_of_work FROM users WHERE telegram_id = $1",
        inviter_telegram
    )
    if not row:
        await conn.close()
        await message.answer("–ê–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    inviter_user_id = row["id"]
    place = row.get("place_of_work")
    if place is None:
        await conn.close()
        await message.answer("–£ –∞–≤—Ç–æ—Ä–∞ –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ ¬´–ú–µ—Å—Ç–æ —Ä–∞–±–æ—Ç—ã¬ª.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    rows = await conn.fetch(
        "SELECT telegram_id FROM users WHERE place_of_work = $1 AND id != $2",
        place, inviter_user_id
    )

    invited = 0
    bot = message.bot
    for record in rows:
        tgid = record.get("telegram_id")
        if bot is None or tgid is None:
            continue
        try:
            await bot.send_message(
                chat_id=tgid,
                text=f"üì£ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (ID {event_id})"
            )
            invited += 1
        except Exception:
            pass

    await conn.close()

    await message.answer(
        f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–ª–ª–µ–≥–∞–º ({invited} —á–µ–ª.).",
        reply_markup=ReplyKeyboardRemove()
    )

    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
            self.bot = message.bot

        async def answer(self, *args, **kwargs):
            return None


    fake = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )

    await state.clear()
    await handle_show_event(fake, state)


@router.message(StateFilter(InvitationStates.CONFIRM_COLLEAGUES), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_colleagues(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
            self.bot = message.bot

        async def answer(self, *args, **kwargs):
            return None


    fake = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )

    await state.clear()
    await handle_show_event(fake, state)



# 5) ¬´üåê –í—Å–µ–º¬ª
@router.message(StateFilter(InvitationStates.CHOOSING_METHOD), F.text == "üåê –í—Å–µ–º")
async def invite_all_opt_in(message: Message, state: FSMContext):
    await state.set_state(InvitationStates.CONFIRM_ALL)
    await message.answer(
        "–ë—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, —É –∫–æ–≥–æ ¬´–û—Ç–∫—Ä—ã—Ç –∫ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º¬ª = True.\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å?",
        reply_markup=invite_confirm_keyboard()
    )

@router.message(StateFilter(InvitationStates.CONFIRM_ALL), F.text == "‚úÖ –†–∞–∑–æ—Å–ª–∞—Ç—å")
async def send_to_all(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    user = message.from_user
    if user is None:
        await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∞–≤—Ç–æ—Ä–∞.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    inviter_telegram = user.id
    conn = await asyncpg.connect(DATABASE_URL)
    row = await conn.fetchrow(
        "SELECT id FROM users WHERE telegram_id = $1",
        inviter_telegram
    )
    if not row:
        await conn.close()
        await message.answer("–ê–≤—Ç–æ—Ä —Å–æ–±—ã—Ç–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=ReplyKeyboardRemove())
        await state.clear()
        return

    inviter_id = row["id"]
    rows = await conn.fetch(
        "SELECT telegram_id FROM users WHERE open_to_offers = TRUE AND id != $1",
        inviter_id
    )

    invited = 0
    bot = message.bot
    for record in rows:
        tgid = record.get("telegram_id")
        if bot is None or tgid is None:
            continue
        try:
            await bot.send_message(
                chat_id=tgid,
                text=f"üì£ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–∞ —Å–æ–±—ã—Ç–∏–µ (ID {event_id})"
            )
            invited += 1
        except Exception:
            pass

    await conn.close()

    await message.answer(
        f"‚úÖ –ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã ({invited} —á–µ–ª.).",
        reply_markup=ReplyKeyboardRemove()
    )

    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
            self.bot = message.bot

        async def answer(self, *args, **kwargs):
            return None


    fake = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )

    await state.clear()
    await handle_show_event(fake, state)


@router.message(StateFilter(InvitationStates.CONFIRM_ALL), F.text == "‚ùå –û—Ç–º–µ–Ω–∞")
async def cancel_send_all(message: Message, state: FSMContext):
    data = await state.get_data()
    event_id = data.get("event_id")
    source = data.get("source", "active")
    page = data.get("page", 0)

    await message.answer("–†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())

    class FakeCallback:
        def __init__(self, message, data, from_user):
            self.message = message
            self.data = data
            self.from_user = from_user
            self.bot = message.bot

        async def answer(self, *args, **kwargs):
            return None


    fake = FakeCallback(
        message=message,
        data=f"event:{event_id}:{source}:{page}",
        from_user=message.from_user
    )

    await state.clear()
    await handle_show_event(fake, state)
